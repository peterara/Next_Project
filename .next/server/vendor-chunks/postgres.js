"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres";
exports.ids = ["vendor-chunks/postgres"];
exports.modules = {

/***/ "(rsc)/./node_modules/postgres/src/bytes.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/bytes.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst size = 256;\nlet buffer = Buffer.allocUnsafe(size);\nconst messages = \"BCcDdEFfHPpQSX\".split(\"\").reduce((acc, x)=>{\n    const v = x.charCodeAt(0);\n    acc[x] = ()=>{\n        buffer[0] = v;\n        b.i = 5;\n        return b;\n    };\n    return acc;\n}, {});\nconst b = Object.assign(reset, messages, {\n    N: String.fromCharCode(0),\n    i: 0,\n    inc (x) {\n        b.i += x;\n        return b;\n    },\n    str (x) {\n        const length = Buffer.byteLength(x);\n        fit(length);\n        b.i += buffer.write(x, b.i, length, \"utf8\");\n        return b;\n    },\n    i16 (x) {\n        fit(2);\n        buffer.writeUInt16BE(x, b.i);\n        b.i += 2;\n        return b;\n    },\n    i32 (x, i) {\n        if (i || i === 0) {\n            buffer.writeUInt32BE(x, i);\n            return b;\n        }\n        fit(4);\n        buffer.writeUInt32BE(x, b.i);\n        b.i += 4;\n        return b;\n    },\n    z (x) {\n        fit(x);\n        buffer.fill(0, b.i, b.i + x);\n        b.i += x;\n        return b;\n    },\n    raw (x) {\n        buffer = Buffer.concat([\n            buffer.subarray(0, b.i),\n            x\n        ]);\n        b.i = buffer.length;\n        return b;\n    },\n    end (at = 1) {\n        buffer.writeUInt32BE(b.i - at, at);\n        const out = buffer.subarray(0, b.i);\n        b.i = 0;\n        buffer = Buffer.allocUnsafe(size);\n        return out;\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (b);\nfunction fit(x) {\n    if (buffer.length - b.i < x) {\n        const prev = buffer, length = prev.length;\n        buffer = Buffer.allocUnsafe(length + (length >> 1) + x);\n        prev.copy(buffer);\n    }\n}\nfunction reset() {\n    b.i = 0;\n    return b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2J5dGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxPQUFPO0FBQ2IsSUFBSUMsU0FBU0MsT0FBT0MsV0FBVyxDQUFDSDtBQUVoQyxNQUFNSSxXQUFXLGlCQUFpQkMsS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztJQUN2RCxNQUFNQyxJQUFJRCxFQUFFRSxVQUFVLENBQUM7SUFDdkJILEdBQUcsQ0FBQ0MsRUFBRSxHQUFHO1FBQ1BQLE1BQU0sQ0FBQyxFQUFFLEdBQUdRO1FBQ1pFLEVBQUVDLENBQUMsR0FBRztRQUNOLE9BQU9EO0lBQ1Q7SUFDQSxPQUFPSjtBQUNULEdBQUcsQ0FBQztBQUVKLE1BQU1JLElBQUlFLE9BQU9DLE1BQU0sQ0FBQ0MsT0FBT1gsVUFBVTtJQUN2Q1ksR0FBR0MsT0FBT0MsWUFBWSxDQUFDO0lBQ3ZCTixHQUFHO0lBQ0hPLEtBQUlYLENBQUM7UUFDSEcsRUFBRUMsQ0FBQyxJQUFJSjtRQUNQLE9BQU9HO0lBQ1Q7SUFDQVMsS0FBSVosQ0FBQztRQUNILE1BQU1hLFNBQVNuQixPQUFPb0IsVUFBVSxDQUFDZDtRQUNqQ2UsSUFBSUY7UUFDSlYsRUFBRUMsQ0FBQyxJQUFJWCxPQUFPdUIsS0FBSyxDQUFDaEIsR0FBR0csRUFBRUMsQ0FBQyxFQUFFUyxRQUFRO1FBQ3BDLE9BQU9WO0lBQ1Q7SUFDQWMsS0FBSWpCLENBQUM7UUFDSGUsSUFBSTtRQUNKdEIsT0FBT3lCLGFBQWEsQ0FBQ2xCLEdBQUdHLEVBQUVDLENBQUM7UUFDM0JELEVBQUVDLENBQUMsSUFBSTtRQUNQLE9BQU9EO0lBQ1Q7SUFDQWdCLEtBQUluQixDQUFDLEVBQUVJLENBQUM7UUFDTixJQUFJQSxLQUFLQSxNQUFNLEdBQUc7WUFDaEJYLE9BQU8yQixhQUFhLENBQUNwQixHQUFHSTtZQUN4QixPQUFPRDtRQUNUO1FBQ0FZLElBQUk7UUFDSnRCLE9BQU8yQixhQUFhLENBQUNwQixHQUFHRyxFQUFFQyxDQUFDO1FBQzNCRCxFQUFFQyxDQUFDLElBQUk7UUFDUCxPQUFPRDtJQUNUO0lBQ0FrQixHQUFFckIsQ0FBQztRQUNEZSxJQUFJZjtRQUNKUCxPQUFPNkIsSUFBSSxDQUFDLEdBQUduQixFQUFFQyxDQUFDLEVBQUVELEVBQUVDLENBQUMsR0FBR0o7UUFDMUJHLEVBQUVDLENBQUMsSUFBSUo7UUFDUCxPQUFPRztJQUNUO0lBQ0FvQixLQUFJdkIsQ0FBQztRQUNIUCxTQUFTQyxPQUFPOEIsTUFBTSxDQUFDO1lBQUMvQixPQUFPZ0MsUUFBUSxDQUFDLEdBQUd0QixFQUFFQyxDQUFDO1lBQUdKO1NBQUU7UUFDbkRHLEVBQUVDLENBQUMsR0FBR1gsT0FBT29CLE1BQU07UUFDbkIsT0FBT1Y7SUFDVDtJQUNBdUIsS0FBSUMsS0FBSyxDQUFDO1FBQ1JsQyxPQUFPMkIsYUFBYSxDQUFDakIsRUFBRUMsQ0FBQyxHQUFHdUIsSUFBSUE7UUFDL0IsTUFBTUMsTUFBTW5DLE9BQU9nQyxRQUFRLENBQUMsR0FBR3RCLEVBQUVDLENBQUM7UUFDbENELEVBQUVDLENBQUMsR0FBRztRQUNOWCxTQUFTQyxPQUFPQyxXQUFXLENBQUNIO1FBQzVCLE9BQU9vQztJQUNUO0FBQ0Y7QUFFQSxpRUFBZXpCLENBQUNBLEVBQUE7QUFFaEIsU0FBU1ksSUFBSWYsQ0FBQztJQUNaLElBQUlQLE9BQU9vQixNQUFNLEdBQUdWLEVBQUVDLENBQUMsR0FBR0osR0FBRztRQUMzQixNQUFNNkIsT0FBT3BDLFFBQ1BvQixTQUFTZ0IsS0FBS2hCLE1BQU07UUFFMUJwQixTQUFTQyxPQUFPQyxXQUFXLENBQUNrQixTQUFVQSxDQUFBQSxVQUFVLEtBQUtiO1FBQ3JENkIsS0FBS0MsSUFBSSxDQUFDckM7SUFDWjtBQUNGO0FBRUEsU0FBU2M7SUFDUEosRUFBRUMsQ0FBQyxHQUFHO0lBQ04sT0FBT0Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3N5c3RlbS1wZXJmb3JtYW5jZS1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvYnl0ZXMuanM/ZmJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzaXplID0gMjU2XG5sZXQgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNpemUpXG5cbmNvbnN0IG1lc3NhZ2VzID0gJ0JDY0RkRUZmSFBwUVNYJy5zcGxpdCgnJykucmVkdWNlKChhY2MsIHgpID0+IHtcbiAgY29uc3QgdiA9IHguY2hhckNvZGVBdCgwKVxuICBhY2NbeF0gPSAoKSA9PiB7XG4gICAgYnVmZmVyWzBdID0gdlxuICAgIGIuaSA9IDVcbiAgICByZXR1cm4gYlxuICB9XG4gIHJldHVybiBhY2Ncbn0sIHt9KVxuXG5jb25zdCBiID0gT2JqZWN0LmFzc2lnbihyZXNldCwgbWVzc2FnZXMsIHtcbiAgTjogU3RyaW5nLmZyb21DaGFyQ29kZSgwKSxcbiAgaTogMCxcbiAgaW5jKHgpIHtcbiAgICBiLmkgKz0geFxuICAgIHJldHVybiBiXG4gIH0sXG4gIHN0cih4KSB7XG4gICAgY29uc3QgbGVuZ3RoID0gQnVmZmVyLmJ5dGVMZW5ndGgoeClcbiAgICBmaXQobGVuZ3RoKVxuICAgIGIuaSArPSBidWZmZXIud3JpdGUoeCwgYi5pLCBsZW5ndGgsICd1dGY4JylcbiAgICByZXR1cm4gYlxuICB9LFxuICBpMTYoeCkge1xuICAgIGZpdCgyKVxuICAgIGJ1ZmZlci53cml0ZVVJbnQxNkJFKHgsIGIuaSlcbiAgICBiLmkgKz0gMlxuICAgIHJldHVybiBiXG4gIH0sXG4gIGkzMih4LCBpKSB7XG4gICAgaWYgKGkgfHwgaSA9PT0gMCkge1xuICAgICAgYnVmZmVyLndyaXRlVUludDMyQkUoeCwgaSlcbiAgICAgIHJldHVybiBiXG4gICAgfVxuICAgIGZpdCg0KVxuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkJFKHgsIGIuaSlcbiAgICBiLmkgKz0gNFxuICAgIHJldHVybiBiXG4gIH0sXG4gIHooeCkge1xuICAgIGZpdCh4KVxuICAgIGJ1ZmZlci5maWxsKDAsIGIuaSwgYi5pICsgeClcbiAgICBiLmkgKz0geFxuICAgIHJldHVybiBiXG4gIH0sXG4gIHJhdyh4KSB7XG4gICAgYnVmZmVyID0gQnVmZmVyLmNvbmNhdChbYnVmZmVyLnN1YmFycmF5KDAsIGIuaSksIHhdKVxuICAgIGIuaSA9IGJ1ZmZlci5sZW5ndGhcbiAgICByZXR1cm4gYlxuICB9LFxuICBlbmQoYXQgPSAxKSB7XG4gICAgYnVmZmVyLndyaXRlVUludDMyQkUoYi5pIC0gYXQsIGF0KVxuICAgIGNvbnN0IG91dCA9IGJ1ZmZlci5zdWJhcnJheSgwLCBiLmkpXG4gICAgYi5pID0gMFxuICAgIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKVxuICAgIHJldHVybiBvdXRcbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgYlxuXG5mdW5jdGlvbiBmaXQoeCkge1xuICBpZiAoYnVmZmVyLmxlbmd0aCAtIGIuaSA8IHgpIHtcbiAgICBjb25zdCBwcmV2ID0gYnVmZmVyXG4gICAgICAgICwgbGVuZ3RoID0gcHJldi5sZW5ndGhcblxuICAgIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGggKyAobGVuZ3RoID4+IDEpICsgeClcbiAgICBwcmV2LmNvcHkoYnVmZmVyKVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0KCkge1xuICBiLmkgPSAwXG4gIHJldHVybiBiXG59XG4iXSwibmFtZXMiOlsic2l6ZSIsImJ1ZmZlciIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwibWVzc2FnZXMiLCJzcGxpdCIsInJlZHVjZSIsImFjYyIsIngiLCJ2IiwiY2hhckNvZGVBdCIsImIiLCJpIiwiT2JqZWN0IiwiYXNzaWduIiwicmVzZXQiLCJOIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiaW5jIiwic3RyIiwibGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImZpdCIsIndyaXRlIiwiaTE2Iiwid3JpdGVVSW50MTZCRSIsImkzMiIsIndyaXRlVUludDMyQkUiLCJ6IiwiZmlsbCIsInJhdyIsImNvbmNhdCIsInN1YmFycmF5IiwiZW5kIiwiYXQiLCJvdXQiLCJwcmV2IiwiY29weSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/connection.js":
/*!*************************************************!*\
  !*** ./node_modules/postgres/src/connection.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! net */ \"net\");\n/* harmony import */ var tls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tls */ \"tls\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var perf_hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/postgres/src/types.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/postgres/src/errors.js\");\n/* harmony import */ var _result_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./result.js */ \"(rsc)/./node_modules/postgres/src/result.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./queue.js */ \"(rsc)/./node_modules/postgres/src/queue.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./query.js */ \"(rsc)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bytes.js */ \"(rsc)/./node_modules/postgres/src/bytes.js\");\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Connection);\nlet uid = 1;\nconst Sync = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().S().end(), Flush = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().H().end(), SSLRequest = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().i32(8).i32(80877103).end(8), ExecuteUnnamed = Buffer.concat([\n    (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().E().str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i32(0).end(),\n    Sync\n]), DescribeUnnamed = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().D().str(\"S\").str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end(), noop = ()=>{};\nconst retryRoutines = new Set([\n    \"FetchPreparedStatement\",\n    \"RevalidateCachedQuery\",\n    \"transformAssignedExpr\"\n]);\nconst errorFields = {\n    83: \"severity_local\",\n    86: \"severity\",\n    67: \"code\",\n    77: \"message\",\n    68: \"detail\",\n    72: \"hint\",\n    80: \"position\",\n    112: \"internal_position\",\n    113: \"internal_query\",\n    87: \"where\",\n    115: \"schema_name\",\n    116: \"table_name\",\n    99: \"column_name\",\n    100: \"data type_name\",\n    110: \"constraint_name\",\n    70: \"file\",\n    76: \"line\",\n    82: \"routine\" // R\n};\nfunction Connection(options, queues = {}, { onopen = noop, onend = noop, onclose = noop } = {}) {\n    const { ssl, max, user, host, port, database, parsers, transform, onnotice, onnotify, onparameter, max_pipeline, keep_alive, backoff, target_session_attrs } = options;\n    const sent = (0,_queue_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(), id = uid++, backend = {\n        pid: null,\n        secret: null\n    }, idleTimer = timer(end, options.idle_timeout), lifeTimer = timer(end, options.max_lifetime), connectTimer = timer(connectTimedOut, options.connect_timeout);\n    let socket = null, cancelMessage, result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](), incoming = Buffer.alloc(0), needsTypes = options.fetch_types, backendParameters = {}, statements = {}, statementId = Math.random().toString(36).slice(2), statementCount = 1, closedDate = 0, remaining = 0, hostIndex = 0, retries = 0, length = 0, delay = 0, rows = 0, serverSignature = null, nextWriteTimer = null, terminated = false, incomings = null, results = null, initial = null, ending = null, stream = null, chunk = null, ended = null, nonce = null, query = null, final = null;\n    const connection = {\n        queue: queues.closed,\n        idleTimer,\n        connect (query) {\n            initial = query;\n            reconnect();\n        },\n        terminate,\n        execute,\n        cancel,\n        end,\n        count: 0,\n        id\n    };\n    queues.closed && queues.closed.push(connection);\n    return connection;\n    async function createSocket() {\n        let x;\n        try {\n            x = options.socket ? await Promise.resolve(options.socket(options)) : new net__WEBPACK_IMPORTED_MODULE_0__.Socket();\n        } catch (e) {\n            error(e);\n            return;\n        }\n        x.on(\"error\", error);\n        x.on(\"close\", closed);\n        x.on(\"drain\", drain);\n        return x;\n    }\n    async function cancel({ pid, secret }, resolve, reject) {\n        try {\n            cancelMessage = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().i32(16).i32(80877102).i32(pid).i32(secret).end(16);\n            await connect();\n            socket.once(\"error\", reject);\n            socket.once(\"close\", resolve);\n        } catch (error) {\n            reject(error);\n        }\n    }\n    function execute(q) {\n        if (terminated) return queryError(q, _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        if (q.cancelled) return;\n        try {\n            q.state = backend;\n            query ? sent.push(q) : (query = q, query.active = true);\n            build(q);\n            return write(toBuffer(q)) && !q.describeFirst && !q.cursorFn && sent.length < max_pipeline && (!q.options.onexecute || q.options.onexecute(connection));\n        } catch (error) {\n            sent.length === 0 && write(Sync);\n            errored(error);\n            return true;\n        }\n    }\n    function toBuffer(q) {\n        if (q.parameters.length >= 65534) throw _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"MAX_PARAMETERS_EXCEEDED\", \"Max number of parameters (65534) exceeded\");\n        return q.options.simple ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().Q().str(q.statement.string + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end() : q.describeFirst ? Buffer.concat([\n            describe(q),\n            Flush\n        ]) : q.prepare ? q.prepared ? prepared(q) : Buffer.concat([\n            describe(q),\n            prepared(q)\n        ]) : unnamed(q);\n    }\n    function describe(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types, q.statement.name),\n            Describe(\"S\", q.statement.name)\n        ]);\n    }\n    function prepared(q) {\n        return Buffer.concat([\n            Bind(q.parameters, q.statement.types, q.statement.name, q.cursorName),\n            q.cursorFn ? Execute(\"\", q.cursorRows) : ExecuteUnnamed\n        ]);\n    }\n    function unnamed(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types),\n            DescribeUnnamed,\n            prepared(q)\n        ]);\n    }\n    function build(q) {\n        const parameters = [], types = [];\n        const string = (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(q, q.strings[0], q.args[0], parameters, types, options);\n        !q.tagged && q.args.forEach((x)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.handleValue)(x, parameters, types, options));\n        q.prepare = options.prepare && (\"prepare\" in q.options ? q.options.prepare : true);\n        q.string = string;\n        q.signature = q.prepare && types + string;\n        q.onlyDescribe && delete statements[q.signature];\n        q.parameters = q.parameters || parameters;\n        q.prepared = q.prepare && q.signature in statements;\n        q.describeFirst = q.onlyDescribe || parameters.length && !q.prepared;\n        q.statement = q.prepared ? statements[q.signature] : {\n            string,\n            types,\n            name: q.prepare ? statementId + statementCount++ : \"\"\n        };\n        typeof options.debug === \"function\" && options.debug(id, string, parameters, types);\n    }\n    function write(x, fn) {\n        chunk = chunk ? Buffer.concat([\n            chunk,\n            x\n        ]) : Buffer.from(x);\n        if (fn || chunk.length >= 1024) return nextWrite(fn);\n        nextWriteTimer === null && (nextWriteTimer = setImmediate(nextWrite));\n        return true;\n    }\n    function nextWrite(fn) {\n        const x = socket.write(chunk, fn);\n        nextWriteTimer !== null && clearImmediate(nextWriteTimer);\n        chunk = nextWriteTimer = null;\n        return x;\n    }\n    function connectTimedOut() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECT_TIMEOUT\", options, socket));\n        socket.destroy();\n    }\n    async function secure() {\n        write(SSLRequest);\n        const canSSL = await new Promise((r)=>socket.once(\"data\", (x)=>r(x[0] === 83))) // S\n        ;\n        if (!canSSL && ssl === \"prefer\") return connected();\n        socket.removeAllListeners();\n        socket = tls__WEBPACK_IMPORTED_MODULE_1__.connect({\n            socket,\n            servername: net__WEBPACK_IMPORTED_MODULE_0__.isIP(socket.host) ? undefined : socket.host,\n            ...ssl === \"require\" || ssl === \"allow\" || ssl === \"prefer\" ? {\n                rejectUnauthorized: false\n            } : ssl === \"verify-full\" ? {} : typeof ssl === \"object\" ? ssl : {}\n        });\n        socket.on(\"secureConnect\", connected);\n        socket.on(\"error\", error);\n        socket.on(\"close\", closed);\n        socket.on(\"drain\", drain);\n    }\n    /* c8 ignore next 3 */ function drain() {\n        !query && onopen(connection);\n    }\n    function data(x) {\n        if (incomings) {\n            incomings.push(x);\n            remaining -= x.length;\n            if (remaining > 0) return;\n        }\n        incoming = incomings ? Buffer.concat(incomings, length - remaining) : incoming.length === 0 ? x : Buffer.concat([\n            incoming,\n            x\n        ], incoming.length + x.length);\n        while(incoming.length > 4){\n            length = incoming.readUInt32BE(1);\n            if (length >= incoming.length) {\n                remaining = length - incoming.length;\n                incomings = [\n                    incoming\n                ];\n                break;\n            }\n            try {\n                handle(incoming.subarray(0, length + 1));\n            } catch (e) {\n                query && (query.cursorFn || query.describeFirst) && write(Sync);\n                errored(e);\n            }\n            incoming = incoming.subarray(length + 1);\n            remaining = 0;\n            incomings = null;\n        }\n    }\n    async function connect() {\n        terminated = false;\n        backendParameters = {};\n        socket || (socket = await createSocket());\n        if (!socket) return;\n        connectTimer.start();\n        if (options.socket) return ssl ? secure() : connected();\n        socket.on(\"connect\", ssl ? secure : connected);\n        if (options.path) return socket.connect(options.path);\n        socket.ssl = ssl;\n        socket.connect(port[hostIndex], host[hostIndex]);\n        socket.host = host[hostIndex];\n        socket.port = port[hostIndex];\n        hostIndex = (hostIndex + 1) % port.length;\n    }\n    function reconnect() {\n        setTimeout(connect, closedDate ? closedDate + delay - perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now() : 0);\n    }\n    function connected() {\n        try {\n            statements = {};\n            needsTypes = options.fetch_types;\n            statementId = Math.random().toString(36).slice(2);\n            statementCount = 1;\n            lifeTimer.start();\n            socket.on(\"data\", data);\n            keep_alive && socket.setKeepAlive && socket.setKeepAlive(true, 1000 * keep_alive);\n            const s = StartupMessage();\n            write(s);\n        } catch (err) {\n            error(err);\n        }\n    }\n    function error(err) {\n        if (connection.queue === queues.connecting && options.host[retries + 1]) return;\n        errored(err);\n        while(sent.length)queryError(sent.shift(), err);\n    }\n    function errored(err) {\n        stream && (stream.destroy(err), stream = null);\n        query && queryError(query, err);\n        initial && (queryError(initial, err), initial = null);\n    }\n    function queryError(query, err) {\n        if (query.reserve) return query.reject(err);\n        if (!err || typeof err !== \"object\") err = new Error(err);\n        \"query\" in err || \"parameters\" in err || Object.defineProperties(err, {\n            stack: {\n                value: err.stack + query.origin.replace(/.*\\n/, \"\\n\"),\n                enumerable: options.debug\n            },\n            query: {\n                value: query.string,\n                enumerable: options.debug\n            },\n            parameters: {\n                value: query.parameters,\n                enumerable: options.debug\n            },\n            args: {\n                value: query.args,\n                enumerable: options.debug\n            },\n            types: {\n                value: query.statement && query.statement.types,\n                enumerable: options.debug\n            }\n        });\n        query.reject(err);\n    }\n    function end() {\n        return ending || (!connection.reserved && onend(connection), !connection.reserved && !initial && !query && sent.length === 0 ? (terminate(), new Promise((r)=>socket && socket.readyState !== \"closed\" ? socket.once(\"close\", r) : r())) : ending = new Promise((r)=>ended = r));\n    }\n    function terminate() {\n        terminated = true;\n        if (stream || query || initial || sent.length) error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        clearImmediate(nextWriteTimer);\n        if (socket) {\n            socket.removeListener(\"data\", data);\n            socket.removeListener(\"connect\", connected);\n            socket.readyState === \"open\" && socket.end((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().X().end());\n        }\n        ended && (ended(), ending = ended = null);\n    }\n    async function closed(hadError) {\n        incoming = Buffer.alloc(0);\n        remaining = 0;\n        incomings = null;\n        clearImmediate(nextWriteTimer);\n        socket.removeListener(\"data\", data);\n        socket.removeListener(\"connect\", connected);\n        idleTimer.cancel();\n        lifeTimer.cancel();\n        connectTimer.cancel();\n        socket.removeAllListeners();\n        socket = null;\n        if (initial) return reconnect();\n        !hadError && (query || sent.length) && error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_CLOSED\", options, socket));\n        closedDate = perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now();\n        hadError && options.shared.retries++;\n        delay = (typeof backoff === \"function\" ? backoff(options.shared.retries) : backoff) * 1000;\n        onclose(connection, _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_CLOSED\", options, socket));\n    }\n    /* Handlers */ function handle(xs, x = xs[0]) {\n        (x === 68 ? DataRow : x === 100 ? CopyData : x === 65 ? NotificationResponse : x === 83 ? ParameterStatus : x === 90 ? ReadyForQuery : x === 67 ? CommandComplete : x === 50 ? BindComplete : x === 49 ? ParseComplete : x === 116 ? ParameterDescription : x === 84 ? RowDescription : x === 82 ? Authentication : x === 110 ? NoData : x === 75 ? BackendKeyData : x === 69 ? ErrorResponse : x === 115 ? PortalSuspended : x === 51 ? CloseComplete : x === 71 ? CopyInResponse : x === 78 ? NoticeResponse : x === 72 ? CopyOutResponse : x === 99 ? CopyDone : x === 73 ? EmptyQueryResponse : x === 86 ? FunctionCallResponse : x === 118 ? NegotiateProtocolVersion : x === 87 ? CopyBothResponse : /* c8 ignore next */ UnknownMessage)(xs);\n    }\n    function DataRow(x) {\n        let index = 7;\n        let length;\n        let column;\n        let value;\n        const row = query.isRaw ? new Array(query.statement.columns.length) : {};\n        for(let i = 0; i < query.statement.columns.length; i++){\n            column = query.statement.columns[i];\n            length = x.readInt32BE(index);\n            index += 4;\n            value = length === -1 ? null : query.isRaw === true ? x.subarray(index, index += length) : column.parser === undefined ? x.toString(\"utf8\", index, index += length) : column.parser.array === true ? column.parser(x.toString(\"utf8\", index + 1, index += length)) : column.parser(x.toString(\"utf8\", index, index += length));\n            query.isRaw ? row[i] = query.isRaw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n        }\n        query.forEachFn ? query.forEachFn(transform.row.from ? transform.row.from(row) : row, result) : result[rows++] = transform.row.from ? transform.row.from(row) : row;\n    }\n    function ParameterStatus(x) {\n        const [k, v] = x.toString(\"utf8\", 5, x.length - 1).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N);\n        backendParameters[k] = v;\n        if (options.parameters[k] !== v) {\n            options.parameters[k] = v;\n            onparameter && onparameter(k, v);\n        }\n    }\n    function ReadyForQuery(x) {\n        query && query.options.simple && query.resolve(results || result);\n        query = results = null;\n        result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n        connectTimer.cancel();\n        if (initial) {\n            if (target_session_attrs) {\n                if (!backendParameters.in_hot_standby || !backendParameters.default_transaction_read_only) return fetchState();\n                else if (tryNext(target_session_attrs, backendParameters)) return terminate();\n            }\n            if (needsTypes) {\n                initial.reserve && (initial = null);\n                return fetchArrayTypes();\n            }\n            initial && !initial.reserve && execute(initial);\n            options.shared.retries = retries = 0;\n            initial = null;\n            return;\n        }\n        while(sent.length && (query = sent.shift()) && (query.active = true, query.cancelled))Connection(options).cancel(query.state, query.cancelled.resolve, query.cancelled.reject);\n        if (query) return; // Consider opening if able and sent.length < 50\n        connection.reserved ? !connection.reserved.release && x[5] === 73 // I\n         ? ending ? terminate() : (connection.reserved = null, onopen(connection)) : connection.reserved() : ending ? terminate() : onopen(connection);\n    }\n    function CommandComplete(x) {\n        rows = 0;\n        for(let i = x.length - 1; i > 0; i--){\n            if (x[i] === 32 && x[i + 1] < 58 && result.count === null) result.count = +x.toString(\"utf8\", i + 1, x.length - 1);\n            if (x[i - 1] >= 65) {\n                result.command = x.toString(\"utf8\", 5, i);\n                result.state = backend;\n                break;\n            }\n        }\n        final && (final(), final = null);\n        if (result.command === \"BEGIN\" && max !== 1 && !connection.reserved) return errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"UNSAFE_TRANSACTION\", \"Only use sql.begin, sql.reserved or max: 1\"));\n        if (query.options.simple) return BindComplete();\n        if (query.cursorFn) {\n            result.count && query.cursorFn(result);\n            write(Sync);\n        }\n        query.resolve(result);\n    }\n    function ParseComplete() {\n        query.parsing = false;\n    }\n    function BindComplete() {\n        !result.statement && (result.statement = query.statement);\n        result.columns = query.statement.columns;\n    }\n    function ParameterDescription(x) {\n        const length = x.readUInt16BE(5);\n        for(let i = 0; i < length; ++i)!query.statement.types[i] && (query.statement.types[i] = x.readUInt32BE(7 + i * 4));\n        query.prepare && (statements[query.signature] = query.statement);\n        query.describeFirst && !query.onlyDescribe && (write(prepared(query)), query.describeFirst = false);\n    }\n    function RowDescription(x) {\n        if (result.command) {\n            results = results || [\n                result\n            ];\n            results.push(result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]());\n            result.count = null;\n            query.statement.columns = null;\n        }\n        const length = x.readUInt16BE(5);\n        let index = 7;\n        let start;\n        query.statement.columns = Array(length);\n        for(let i = 0; i < length; ++i){\n            start = index;\n            while(x[index++] !== 0);\n            const table = x.readUInt32BE(index);\n            const number = x.readUInt16BE(index + 4);\n            const type = x.readUInt32BE(index + 6);\n            query.statement.columns[i] = {\n                name: transform.column.from ? transform.column.from(x.toString(\"utf8\", start, index - 1)) : x.toString(\"utf8\", start, index - 1),\n                parser: parsers[type],\n                table,\n                number,\n                type\n            };\n            index += 18;\n        }\n        result.statement = query.statement;\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    async function Authentication(x, type = x.readUInt32BE(5)) {\n        (type === 3 ? AuthenticationCleartextPassword : type === 5 ? AuthenticationMD5Password : type === 10 ? SASL : type === 11 ? SASLContinue : type === 12 ? SASLFinal : type !== 0 ? UnknownAuth : noop)(x, type);\n    }\n    /* c8 ignore next 5 */ async function AuthenticationCleartextPassword() {\n        const payload = await Pass();\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(payload).z(1).end());\n    }\n    async function AuthenticationMD5Password(x) {\n        const payload = \"md5\" + await md5(Buffer.concat([\n            Buffer.from(await md5(await Pass() + user)),\n            x.subarray(9)\n        ]));\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(payload).z(1).end());\n    }\n    async function SASL() {\n        nonce = (await crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(18)).toString(\"base64\");\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(\"SCRAM-SHA-256\" + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N);\n        const i = _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i;\n        write(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].inc(4).str(\"n,,n=*,r=\" + nonce).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i - i - 4, i).end());\n    }\n    async function SASLContinue(x) {\n        const res = x.toString(\"utf8\", 9).split(\",\").reduce((acc, x)=>(acc[x[0]] = x.slice(2), acc), {});\n        const saltedPassword = await crypto__WEBPACK_IMPORTED_MODULE_2__.pbkdf2Sync(await Pass(), Buffer.from(res.s, \"base64\"), parseInt(res.i), 32, \"sha256\");\n        const clientKey = await hmac(saltedPassword, \"Client Key\");\n        const auth = \"n=*,r=\" + nonce + \",\" + \"r=\" + res.r + \",s=\" + res.s + \",i=\" + res.i + \",c=biws,r=\" + res.r;\n        serverSignature = (await hmac(await hmac(saltedPassword, \"Server Key\"), auth)).toString(\"base64\");\n        const payload = \"c=biws,r=\" + res.r + \",p=\" + xor(clientKey, Buffer.from(await hmac(await sha256(clientKey), auth))).toString(\"base64\");\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(payload).end());\n    }\n    function SASLFinal(x) {\n        if (x.toString(\"utf8\", 9).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N, 1)[0].slice(2) === serverSignature) return;\n        /* c8 ignore next 5 */ errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"SASL_SIGNATURE_MISMATCH\", \"The server did not return the correct signature\"));\n        socket.destroy();\n    }\n    function Pass() {\n        return Promise.resolve(typeof options.pass === \"function\" ? options.pass() : options.pass);\n    }\n    function NoData() {\n        result.statement = query.statement;\n        result.statement.columns = [];\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    function BackendKeyData(x) {\n        backend.pid = x.readUInt32BE(5);\n        backend.secret = x.readUInt32BE(9);\n    }\n    async function fetchArrayTypes() {\n        needsTypes = false;\n        const types = await new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      select b.oid, b.typarray\n      from pg_catalog.pg_type a\n      left join pg_catalog.pg_type b on b.oid = a.typelem\n      where a.typcategory = 'A'\n      group by b.oid, b.typarray\n      order by b.oid\n    `\n        ], [], execute);\n        types.forEach(({ oid, typarray })=>addArrayType(oid, typarray));\n    }\n    function addArrayType(oid, typarray) {\n        if (!!options.parsers[typarray] && !!options.serializers[typarray]) return;\n        const parser = options.parsers[oid];\n        options.shared.typeArrayMap[oid] = typarray;\n        options.parsers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arrayParser)(xs, parser, typarray);\n        options.parsers[typarray].array = true;\n        options.serializers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arraySerializer)(xs, options.serializers[oid], options, typarray);\n    }\n    function tryNext(x, xs) {\n        return x === \"read-write\" && xs.default_transaction_read_only === \"on\" || x === \"read-only\" && xs.default_transaction_read_only === \"off\" || x === \"primary\" && xs.in_hot_standby === \"on\" || x === \"standby\" && xs.in_hot_standby === \"off\" || x === \"prefer-standby\" && xs.in_hot_standby === \"off\" && options.host[retries];\n    }\n    function fetchState() {\n        const query = new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      show transaction_read_only;\n      select pg_catalog.pg_is_in_recovery()\n    `\n        ], [], execute, null, {\n            simple: true\n        });\n        query.resolve = ([[a], [b]])=>{\n            backendParameters.default_transaction_read_only = a.transaction_read_only;\n            backendParameters.in_hot_standby = b.pg_is_in_recovery ? \"on\" : \"off\";\n        };\n        query.execute();\n    }\n    function ErrorResponse(x) {\n        query && (query.cursorFn || query.describeFirst) && write(Sync);\n        const error = _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.postgres(parseError(x));\n        query && query.retried ? errored(query.retried) : query && query.prepared && retryRoutines.has(error.routine) ? retry(query, error) : errored(error);\n    }\n    function retry(q, error) {\n        delete statements[q.signature];\n        q.retried = error;\n        execute(q);\n    }\n    function NotificationResponse(x) {\n        if (!onnotify) return;\n        let index = 9;\n        while(x[index++] !== 0);\n        onnotify(x.toString(\"utf8\", 9, index - 1), x.toString(\"utf8\", index, x.length - 1));\n    }\n    async function PortalSuspended() {\n        try {\n            const x = await Promise.resolve(query.cursorFn(result));\n            rows = 0;\n            x === _query_js__WEBPACK_IMPORTED_MODULE_9__.CLOSE ? write(Close(query.portal)) : (result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](), write(Execute(\"\", query.cursorRows)));\n        } catch (err) {\n            write(Sync);\n            query.reject(err);\n        }\n    }\n    function CloseComplete() {\n        result.count && query.cursorFn(result);\n        query.resolve(result);\n    }\n    function CopyInResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Writable({\n            autoDestroy: true,\n            write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyOutResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Readable({\n            read () {\n                socket.resume();\n            }\n        });\n        query.resolve(stream);\n    }\n    /* c8 ignore next 3 */ function CopyBothResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Duplex({\n            autoDestroy: true,\n            read () {\n                socket.resume();\n            },\n            /* c8 ignore next 11 */ write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyData(x) {\n        stream && (stream.push(x.subarray(5)) || socket.pause());\n    }\n    function CopyDone() {\n        stream && stream.push(null);\n        stream = null;\n    }\n    function NoticeResponse(x) {\n        onnotice ? onnotice(parseError(x)) : console.log(parseError(x)) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function EmptyQueryResponse() {\n    /* noop */ }\n    /* c8 ignore next 3 */ function FunctionCallResponse() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported(\"FunctionCallResponse\"));\n    }\n    /* c8 ignore next 3 */ function NegotiateProtocolVersion() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported(\"NegotiateProtocolVersion\"));\n    }\n    /* c8 ignore next 3 */ function UnknownMessage(x) {\n        console.error(\"Postgres.js : Unknown Message:\", x[0]) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function UnknownAuth(x, type) {\n        console.error(\"Postgres.js : Unknown Auth:\", type) // eslint-disable-line\n        ;\n    }\n    /* Messages */ function Bind(parameters, types, statement = \"\", portal = \"\") {\n        let prev, type;\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().B().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).str(statement + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i16(0).i16(parameters.length);\n        parameters.forEach((x, i)=>{\n            if (x === null) return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i32(0xFFFFFFFF);\n            type = types[i];\n            parameters[i] = x = type in options.serializers ? options.serializers[type](x) : \"\" + x;\n            prev = _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i;\n            _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].inc(4).str(x).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i - prev - 4, prev);\n        });\n        _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i16(0);\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].end();\n    }\n    function Parse(str, parameters, types, name = \"\") {\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().P().str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).str(str + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i16(parameters.length);\n        parameters.forEach((x, i)=>_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i32(types[i] || 0));\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].end();\n    }\n    function Describe(x, name = \"\") {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().D().str(x).str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end();\n    }\n    function Execute(portal = \"\", rows = 0) {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().E().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i32(rows).end(),\n            Flush\n        ]);\n    }\n    function Close(portal = \"\") {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().C().str(\"P\").str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end(),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().S().end()\n        ]);\n    }\n    function StartupMessage() {\n        return cancelMessage || (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().inc(4).i16(3).z(2).str(Object.entries(Object.assign({\n            user,\n            database,\n            client_encoding: \"UTF8\"\n        }, options.connection)).filter(([, v])=>v).map(([k, v])=>k + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N + v).join(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N)).z(2).end(0);\n    }\n}\nfunction parseError(x) {\n    const error = {};\n    let start = 5;\n    for(let i = 5; i < x.length - 1; i++){\n        if (x[i] === 0) {\n            error[errorFields[x[start]]] = x.toString(\"utf8\", start + 1, i);\n            start = i + 1;\n        }\n    }\n    return error;\n}\nfunction md5(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash(\"md5\").update(x).digest(\"hex\");\n}\nfunction hmac(key, x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHmac(\"sha256\", key).update(x).digest();\n}\nfunction sha256(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash(\"sha256\").update(x).digest();\n}\nfunction xor(a, b) {\n    const length = Math.max(a.length, b.length);\n    const buffer = Buffer.allocUnsafe(length);\n    for(let i = 0; i < length; i++)buffer[i] = a[i] ^ b[i];\n    return buffer;\n}\nfunction timer(fn, seconds) {\n    seconds = typeof seconds === \"function\" ? seconds() : seconds;\n    if (!seconds) return {\n        cancel: noop,\n        start: noop\n    };\n    let timer;\n    return {\n        cancel () {\n            timer && (clearTimeout(timer), timer = null);\n        },\n        start () {\n            timer && clearTimeout(timer);\n            timer = setTimeout(done, seconds * 1000, arguments);\n        }\n    };\n    function done(args) {\n        fn.apply(null, args);\n        timer = null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres/src/errors.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   PostgresError: () => (/* binding */ PostgresError)\n/* harmony export */ });\nclass PostgresError extends Error {\n    constructor(x){\n        super(x.message);\n        this.name = this.constructor.name;\n        Object.assign(this, x);\n    }\n}\nconst Errors = {\n    connection,\n    postgres,\n    generic,\n    notSupported\n};\nfunction connection(x, options, socket) {\n    const { host, port } = socket || options;\n    const error = Object.assign(new Error(\"write \" + x + \" \" + (options.path || host + \":\" + port)), {\n        code: x,\n        errno: x,\n        address: options.path || host\n    }, options.path ? {} : {\n        port: port\n    });\n    Error.captureStackTrace(error, connection);\n    return error;\n}\nfunction postgres(x) {\n    const error = new PostgresError(x);\n    Error.captureStackTrace(error, postgres);\n    return error;\n}\nfunction generic(code, message) {\n    const error = Object.assign(new Error(code + \": \" + message), {\n        code\n    });\n    Error.captureStackTrace(error, generic);\n    return error;\n}\n/* c8 ignore next 10 */ function notSupported(x) {\n    const error = Object.assign(new Error(x + \" (B) is not supported\"), {\n        code: \"MESSAGE_NOT_SUPPORTED\",\n        name: x\n    });\n    Error.captureStackTrace(error, notSupported);\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLHNCQUFzQkM7SUFDakNDLFlBQVlDLENBQUMsQ0FBRTtRQUNiLEtBQUssQ0FBQ0EsRUFBRUMsT0FBTztRQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0gsV0FBVyxDQUFDRyxJQUFJO1FBQ2pDQyxPQUFPQyxNQUFNLENBQUMsSUFBSSxFQUFFSjtJQUN0QjtBQUNGO0FBRU8sTUFBTUssU0FBUztJQUNwQkM7SUFDQUM7SUFDQUM7SUFDQUM7QUFDRixFQUFDO0FBRUQsU0FBU0gsV0FBV04sQ0FBQyxFQUFFVSxPQUFPLEVBQUVDLE1BQU07SUFDcEMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRSxHQUFHRixVQUFVRDtJQUNqQyxNQUFNSSxRQUFRWCxPQUFPQyxNQUFNLENBQ3pCLElBQUlOLE1BQU8sV0FBV0UsSUFBSSxNQUFPVSxDQUFBQSxRQUFRSyxJQUFJLElBQUtILE9BQU8sTUFBTUMsSUFBSSxJQUNuRTtRQUNFRyxNQUFNaEI7UUFDTmlCLE9BQU9qQjtRQUNQa0IsU0FBU1IsUUFBUUssSUFBSSxJQUFJSDtJQUMzQixHQUFHRixRQUFRSyxJQUFJLEdBQUcsQ0FBQyxJQUFJO1FBQUVGLE1BQU1BO0lBQUs7SUFFdENmLE1BQU1xQixpQkFBaUIsQ0FBQ0wsT0FBT1I7SUFDL0IsT0FBT1E7QUFDVDtBQUVBLFNBQVNQLFNBQVNQLENBQUM7SUFDakIsTUFBTWMsUUFBUSxJQUFJakIsY0FBY0c7SUFDaENGLE1BQU1xQixpQkFBaUIsQ0FBQ0wsT0FBT1A7SUFDL0IsT0FBT087QUFDVDtBQUVBLFNBQVNOLFFBQVFRLElBQUksRUFBRWYsT0FBTztJQUM1QixNQUFNYSxRQUFRWCxPQUFPQyxNQUFNLENBQUMsSUFBSU4sTUFBTWtCLE9BQU8sT0FBT2YsVUFBVTtRQUFFZTtJQUFLO0lBQ3JFbEIsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPTjtJQUMvQixPQUFPTTtBQUNUO0FBRUEscUJBQXFCLEdBQ3JCLFNBQVNMLGFBQWFULENBQUM7SUFDckIsTUFBTWMsUUFBUVgsT0FBT0MsTUFBTSxDQUN6QixJQUFJTixNQUFNRSxJQUFJLDBCQUNkO1FBQ0VnQixNQUFNO1FBQ05kLE1BQU1GO0lBQ1I7SUFFRkYsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPTDtJQUMvQixPQUFPSztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXBlcmZvcm1hbmNlLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3Bvc3RncmVzL3NyYy9lcnJvcnMuanM/OGQzOSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUG9zdGdyZXNFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoeCkge1xuICAgIHN1cGVyKHgubWVzc2FnZSlcbiAgICB0aGlzLm5hbWUgPSB0aGlzLmNvbnN0cnVjdG9yLm5hbWVcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHgpXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVycm9ycyA9IHtcbiAgY29ubmVjdGlvbixcbiAgcG9zdGdyZXMsXG4gIGdlbmVyaWMsXG4gIG5vdFN1cHBvcnRlZFxufVxuXG5mdW5jdGlvbiBjb25uZWN0aW9uKHgsIG9wdGlvbnMsIHNvY2tldCkge1xuICBjb25zdCB7IGhvc3QsIHBvcnQgfSA9IHNvY2tldCB8fCBvcHRpb25zXG4gIGNvbnN0IGVycm9yID0gT2JqZWN0LmFzc2lnbihcbiAgICBuZXcgRXJyb3IoKCd3cml0ZSAnICsgeCArICcgJyArIChvcHRpb25zLnBhdGggfHwgKGhvc3QgKyAnOicgKyBwb3J0KSkpKSxcbiAgICB7XG4gICAgICBjb2RlOiB4LFxuICAgICAgZXJybm86IHgsXG4gICAgICBhZGRyZXNzOiBvcHRpb25zLnBhdGggfHwgaG9zdFxuICAgIH0sIG9wdGlvbnMucGF0aCA/IHt9IDogeyBwb3J0OiBwb3J0IH1cbiAgKVxuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnJvciwgY29ubmVjdGlvbilcbiAgcmV0dXJuIGVycm9yXG59XG5cbmZ1bmN0aW9uIHBvc3RncmVzKHgpIHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgUG9zdGdyZXNFcnJvcih4KVxuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnJvciwgcG9zdGdyZXMpXG4gIHJldHVybiBlcnJvclxufVxuXG5mdW5jdGlvbiBnZW5lcmljKGNvZGUsIG1lc3NhZ2UpIHtcbiAgY29uc3QgZXJyb3IgPSBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihjb2RlICsgJzogJyArIG1lc3NhZ2UpLCB7IGNvZGUgfSlcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIGdlbmVyaWMpXG4gIHJldHVybiBlcnJvclxufVxuXG4vKiBjOCBpZ25vcmUgbmV4dCAxMCAqL1xuZnVuY3Rpb24gbm90U3VwcG9ydGVkKHgpIHtcbiAgY29uc3QgZXJyb3IgPSBPYmplY3QuYXNzaWduKFxuICAgIG5ldyBFcnJvcih4ICsgJyAoQikgaXMgbm90IHN1cHBvcnRlZCcpLFxuICAgIHtcbiAgICAgIGNvZGU6ICdNRVNTQUdFX05PVF9TVVBQT1JURUQnLFxuICAgICAgbmFtZTogeFxuICAgIH1cbiAgKVxuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnJvciwgbm90U3VwcG9ydGVkKVxuICByZXR1cm4gZXJyb3Jcbn1cbiJdLCJuYW1lcyI6WyJQb3N0Z3Jlc0Vycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsIngiLCJtZXNzYWdlIiwibmFtZSIsIk9iamVjdCIsImFzc2lnbiIsIkVycm9ycyIsImNvbm5lY3Rpb24iLCJwb3N0Z3JlcyIsImdlbmVyaWMiLCJub3RTdXBwb3J0ZWQiLCJvcHRpb25zIiwic29ja2V0IiwiaG9zdCIsInBvcnQiLCJlcnJvciIsInBhdGgiLCJjb2RlIiwiZXJybm8iLCJhZGRyZXNzIiwiY2FwdHVyZVN0YWNrVHJhY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/postgres/src/types.js\");\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connection.js */ \"(rsc)/./node_modules/postgres/src/connection.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./query.js */ \"(rsc)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./queue.js */ \"(rsc)/./node_modules/postgres/src/queue.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/postgres/src/errors.js\");\n/* harmony import */ var _subscribe_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subscribe.js */ \"(rsc)/./node_modules/postgres/src/subscribe.js\");\n/* harmony import */ var _large_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./large.js */ \"(rsc)/./node_modules/postgres/src/large.js\");\n\n\n\n\n\n\n\n\n\nObject.assign(Postgres, {\n    PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n    toPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.toPascal,\n    pascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.pascal,\n    toCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.toCamel,\n    camel: _types_js__WEBPACK_IMPORTED_MODULE_2__.camel,\n    toKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.toKebab,\n    kebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.kebab,\n    fromPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromPascal,\n    fromCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromCamel,\n    fromKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromKebab,\n    BigInt: {\n        to: 20,\n        from: [\n            20\n        ],\n        parse: (x)=>BigInt(x),\n        serialize: (x)=>x.toString()\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Postgres);\nfunction Postgres(a, b) {\n    const options = parseOptions(a, b), subscribe = options.no_subscribe || (0,_subscribe_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Postgres, {\n        ...options\n    });\n    let ending = false;\n    const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), connecting = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), reserved = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), closed = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), ended = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), open = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), busy = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), full = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), queues = {\n        connecting,\n        reserved,\n        closed,\n        ended,\n        open,\n        busy,\n        full\n    };\n    const connections = [\n        ...Array(options.max)\n    ].map(()=>(0,_connection_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, queues, {\n            onopen,\n            onend,\n            onclose\n        }));\n    const sql = Sql(handler);\n    Object.assign(sql, {\n        get parameters () {\n            return options.parameters;\n        },\n        largeObject: _large_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].bind(null, sql),\n        subscribe,\n        CLOSE: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        END: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n        options,\n        reserve,\n        listen,\n        begin,\n        close,\n        end\n    });\n    return sql;\n    function Sql(handler) {\n        handler.debug = options.debug;\n        Object.entries(options.types).reduce((acc, [name, type])=>{\n            acc[name] = (x)=>new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type.to);\n            return acc;\n        }, typed);\n        Object.assign(sql, {\n            types: typed,\n            typed,\n            unsafe,\n            notify,\n            array,\n            json,\n            file\n        });\n        return sql;\n        function typed(value, type) {\n            return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(value, type);\n        }\n        function sql(strings, ...args) {\n            const query = strings && Array.isArray(strings.raw) ? new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query(strings, args, handler, cancel) : typeof strings === \"string\" && !args.length ? new _types_js__WEBPACK_IMPORTED_MODULE_2__.Identifier(options.transform.column.to ? options.transform.column.to(strings) : strings) : new _types_js__WEBPACK_IMPORTED_MODULE_2__.Builder(strings, args);\n            return query;\n        }\n        function unsafe(string, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([\n                string\n            ], args, handler, cancel, {\n                prepare: false,\n                ...options,\n                simple: \"simple\" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n        function file(path, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([], args, (query)=>{\n                fs__WEBPACK_IMPORTED_MODULE_1__.readFile(path, \"utf8\", (err, string)=>{\n                    if (err) return query.reject(err);\n                    query.strings = [\n                        string\n                    ];\n                    handler(query);\n                });\n            }, cancel, {\n                ...options,\n                simple: \"simple\" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n    }\n    async function listen(name, fn, onlisten) {\n        const listener = {\n            fn,\n            onlisten\n        };\n        const sql = listen.sql || (listen.sql = Postgres({\n            ...options,\n            max: 1,\n            idle_timeout: null,\n            max_lifetime: null,\n            fetch_types: false,\n            onclose () {\n                Object.entries(listen.channels).forEach(([name, { listeners }])=>{\n                    delete listen.channels[name];\n                    Promise.all(listeners.map((l)=>listen(name, l.fn, l.onlisten).catch(()=>{})));\n                });\n            },\n            onnotify (c, x) {\n                c in listen.channels && listen.channels[c].listeners.forEach((l)=>l.fn(x));\n            }\n        }));\n        const channels = listen.channels || (listen.channels = {}), exists = name in channels;\n        if (exists) {\n            channels[name].listeners.push(listener);\n            const result = await channels[name].result;\n            listener.onlisten && listener.onlisten();\n            return {\n                state: result.state,\n                unlisten\n            };\n        }\n        channels[name] = {\n            result: sql`listen ${sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')}`,\n            listeners: [\n                listener\n            ]\n        };\n        const result = await channels[name].result;\n        listener.onlisten && listener.onlisten();\n        return {\n            state: result.state,\n            unlisten\n        };\n        async function unlisten() {\n            if (name in channels === false) return;\n            channels[name].listeners = channels[name].listeners.filter((x)=>x !== listener);\n            if (channels[name].listeners.length) return;\n            delete channels[name];\n            return sql`unlisten ${sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')}`;\n        }\n    }\n    async function notify(channel, payload) {\n        return await sql`select pg_notify(${channel}, ${\"\" + payload})`;\n    }\n    async function reserve() {\n        const queue = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        const c = open.length ? open.shift() : await new Promise((resolve, reject)=>{\n            const query = {\n                reserve: resolve,\n                reject\n            };\n            queries.push(query);\n            closed.length && connect(closed.shift(), query);\n        });\n        move(c, reserved);\n        c.reserved = ()=>queue.length ? c.execute(queue.shift()) : move(c, reserved);\n        c.reserved.release = true;\n        const sql = Sql(handler);\n        sql.release = ()=>{\n            c.reserved = null;\n            onopen(c);\n        };\n        return sql;\n        function handler(q) {\n            c.queue === full ? queue.push(q) : c.execute(q) || move(c, full);\n        }\n    }\n    async function begin(options, fn) {\n        !fn && (fn = options, options = \"\");\n        const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        let savepoints = 0, connection, prepare = null;\n        try {\n            await sql.unsafe(\"begin \" + options.replace(/[^a-z ]/ig, \"\"), [], {\n                onexecute\n            }).execute();\n            return await Promise.race([\n                scope(connection, fn),\n                new Promise((_, reject)=>connection.onclose = reject)\n            ]);\n        } catch (error) {\n            throw error;\n        }\n        async function scope(c, fn, name) {\n            const sql = Sql(handler);\n            sql.savepoint = savepoint;\n            sql.prepare = (x)=>prepare = x.replace(/[^a-z0-9$-_. ]/gi);\n            let uncaughtError, result;\n            name && await sql`savepoint ${sql(name)}`;\n            try {\n                result = await new Promise((resolve, reject)=>{\n                    const x = fn(sql);\n                    Promise.resolve(Array.isArray(x) ? Promise.all(x) : x).then(resolve, reject);\n                });\n                if (uncaughtError) throw uncaughtError;\n            } catch (e) {\n                await (name ? sql`rollback to ${sql(name)}` : sql`rollback`);\n                throw e instanceof _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError && e.code === \"25P02\" && uncaughtError || e;\n            }\n            if (!name) {\n                prepare ? await sql`prepare transaction '${sql.unsafe(prepare)}'` : await sql`commit`;\n            }\n            return result;\n            function savepoint(name, fn) {\n                if (name && Array.isArray(name.raw)) return savepoint((sql)=>sql.apply(sql, arguments));\n                arguments.length === 1 && (fn = name, name = null);\n                return scope(c, fn, \"s\" + savepoints++ + (name ? \"_\" + name : \"\"));\n            }\n            function handler(q) {\n                q.catch((e)=>uncaughtError || (uncaughtError = e));\n                c.queue === full ? queries.push(q) : c.execute(q) || move(c, full);\n            }\n        }\n        function onexecute(c) {\n            connection = c;\n            move(c, reserved);\n            c.reserved = ()=>queries.length ? c.execute(queries.shift()) : move(c, reserved);\n        }\n    }\n    function move(c, queue) {\n        c.queue.remove(c);\n        queue.push(c);\n        c.queue = queue;\n        queue === open ? c.idleTimer.start() : c.idleTimer.cancel();\n        return c;\n    }\n    function json(x) {\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, 3802);\n    }\n    function array(x, type) {\n        if (!Array.isArray(x)) return array(Array.from(arguments));\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type || (x.length ? (0,_types_js__WEBPACK_IMPORTED_MODULE_2__.inferType)(x) || 25 : 0), options.shared.typeArrayMap);\n    }\n    function handler(query) {\n        if (ending) return query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_ENDED\", options, options));\n        if (open.length) return go(open.shift(), query);\n        if (closed.length) return connect(closed.shift(), query);\n        busy.length ? go(busy.shift(), query) : queries.push(query);\n    }\n    function go(c, query) {\n        return c.execute(query) ? move(c, busy) : move(c, full);\n    }\n    function cancel(query) {\n        return new Promise((resolve, reject)=>{\n            query.state ? query.active ? (0,_connection_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options).cancel(query.state, resolve, reject) : query.cancelled = {\n                resolve,\n                reject\n            } : (queries.remove(query), query.cancelled = true, query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"57014\", \"canceling statement due to user request\")), resolve());\n        });\n    }\n    async function end({ timeout = null } = {}) {\n        if (ending) return ending;\n        await 1;\n        let timer;\n        return ending = Promise.race([\n            new Promise((r)=>timeout !== null && (timer = setTimeout(destroy, timeout * 1000, r))),\n            Promise.all(connections.map((c)=>c.end()).concat(listen.sql ? listen.sql.end({\n                timeout: 0\n            }) : [], subscribe.sql ? subscribe.sql.end({\n                timeout: 0\n            }) : []))\n        ]).then(()=>clearTimeout(timer));\n    }\n    async function close() {\n        await Promise.all(connections.map((c)=>c.end()));\n    }\n    async function destroy(resolve) {\n        await Promise.all(connections.map((c)=>c.terminate()));\n        while(queries.length)queries.shift().reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        resolve();\n    }\n    function connect(c, query) {\n        move(c, connecting);\n        c.connect(query);\n        return c;\n    }\n    function onend(c) {\n        move(c, ended);\n    }\n    function onopen(c) {\n        if (queries.length === 0) return move(c, open);\n        let max = Math.ceil(queries.length / (connecting.length + 1)), ready = true;\n        while(ready && queries.length && max-- > 0){\n            const query = queries.shift();\n            if (query.reserve) return query.reserve(c);\n            ready = c.execute(query);\n        }\n        ready ? move(c, busy) : move(c, full);\n    }\n    function onclose(c, e) {\n        move(c, closed);\n        c.reserved = null;\n        c.onclose && (c.onclose(e), c.onclose = null);\n        options.onclose && options.onclose(c.id);\n        queries.length && connect(c, queries.shift());\n    }\n}\nfunction parseOptions(a, b) {\n    if (a && a.shared) return a;\n    const env = process.env // eslint-disable-line\n    , o = (!a || typeof a === \"string\" ? b : a) || {}, { url, multihost } = parseUrl(a), query = [\n        ...url.searchParams\n    ].reduce((a, [b, c])=>(a[b] = c, a), {}), host = o.hostname || o.host || multihost || url.hostname || env.PGHOST || \"localhost\", port = o.port || url.port || env.PGPORT || 5432, user = o.user || o.username || url.username || env.PGUSERNAME || env.PGUSER || osUsername();\n    o.no_prepare && (o.prepare = false);\n    query.sslmode && (query.ssl = query.sslmode, delete query.sslmode);\n    \"timeout\" in o && (console.log(\"The timeout option is deprecated, use idle_timeout instead\"), o.idle_timeout = o.timeout // eslint-disable-line\n    );\n    query.sslrootcert === \"system\" && (query.ssl = \"verify-full\");\n    const ints = [\n        \"idle_timeout\",\n        \"connect_timeout\",\n        \"max_lifetime\",\n        \"max_pipeline\",\n        \"backoff\",\n        \"keep_alive\"\n    ];\n    const defaults = {\n        max: 10,\n        ssl: false,\n        idle_timeout: null,\n        connect_timeout: 30,\n        max_lifetime: max_lifetime,\n        max_pipeline: 100,\n        backoff: backoff,\n        keep_alive: 60,\n        prepare: true,\n        debug: false,\n        fetch_types: true,\n        publications: \"alltables\",\n        target_session_attrs: null\n    };\n    return {\n        host: Array.isArray(host) ? host : host.split(\",\").map((x)=>x.split(\":\")[0]),\n        port: Array.isArray(port) ? port : host.split(\",\").map((x)=>parseInt(x.split(\":\")[1] || port)),\n        path: o.path || host.indexOf(\"/\") > -1 && host + \"/.s.PGSQL.\" + port,\n        database: o.database || o.db || (url.pathname || \"\").slice(1) || env.PGDATABASE || user,\n        user: user,\n        pass: o.pass || o.password || url.password || env.PGPASSWORD || \"\",\n        ...Object.entries(defaults).reduce((acc, [k, d])=>{\n            const value = k in o ? o[k] : k in query ? query[k] === \"disable\" || query[k] === \"false\" ? false : query[k] : env[\"PG\" + k.toUpperCase()] || d;\n            acc[k] = typeof value === \"string\" && ints.includes(k) ? +value : value;\n            return acc;\n        }, {}),\n        connection: {\n            application_name: env.PGAPPNAME || \"postgres.js\",\n            ...o.connection,\n            ...Object.entries(query).reduce((acc, [k, v])=>(k in defaults || (acc[k] = v), acc), {})\n        },\n        types: o.types || {},\n        target_session_attrs: tsa(o, url, env),\n        onnotice: o.onnotice,\n        onnotify: o.onnotify,\n        onclose: o.onclose,\n        onparameter: o.onparameter,\n        socket: o.socket,\n        transform: parseTransform(o.transform || {\n            undefined: undefined\n        }),\n        parameters: {},\n        shared: {\n            retries: 0,\n            typeArrayMap: {}\n        },\n        ...(0,_types_js__WEBPACK_IMPORTED_MODULE_2__.mergeUserTypes)(o.types)\n    };\n}\nfunction tsa(o, url, env) {\n    const x = o.target_session_attrs || url.searchParams.get(\"target_session_attrs\") || env.PGTARGETSESSIONATTRS;\n    if (!x || [\n        \"read-write\",\n        \"read-only\",\n        \"primary\",\n        \"standby\",\n        \"prefer-standby\"\n    ].includes(x)) return x;\n    throw new Error(\"target_session_attrs \" + x + \" is not supported\");\n}\nfunction backoff(retries) {\n    return (0.5 + Math.random() / 2) * Math.min(3 ** retries / 100, 20);\n}\nfunction max_lifetime() {\n    return 60 * (30 + Math.random() * 30);\n}\nfunction parseTransform(x) {\n    return {\n        undefined: x.undefined,\n        column: {\n            from: typeof x.column === \"function\" ? x.column : x.column && x.column.from,\n            to: x.column && x.column.to\n        },\n        value: {\n            from: typeof x.value === \"function\" ? x.value : x.value && x.value.from,\n            to: x.value && x.value.to\n        },\n        row: {\n            from: typeof x.row === \"function\" ? x.row : x.row && x.row.from,\n            to: x.row && x.row.to\n        }\n    };\n}\nfunction parseUrl(url) {\n    if (!url || typeof url !== \"string\") return {\n        url: {\n            searchParams: new Map()\n        }\n    };\n    let host = url;\n    host = host.slice(host.indexOf(\"://\") + 3).split(/[?/]/)[0];\n    host = decodeURIComponent(host.slice(host.indexOf(\"@\") + 1));\n    const urlObj = new URL(url.replace(host, host.split(\",\")[0]));\n    return {\n        url: {\n            username: decodeURIComponent(urlObj.username),\n            password: decodeURIComponent(urlObj.password),\n            host: urlObj.host,\n            hostname: urlObj.hostname,\n            port: urlObj.port,\n            pathname: urlObj.pathname,\n            searchParams: urlObj.searchParams\n        },\n        multihost: host.indexOf(\",\") > -1 && host\n    };\n}\nfunction osUsername() {\n    try {\n        return os__WEBPACK_IMPORTED_MODULE_0__.userInfo().username // eslint-disable-line\n        ;\n    } catch (_) {\n        return process.env.USERNAME || process.env.USER || process.env.LOGNAME // eslint-disable-line\n        ;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/large.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/large.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ largeObject)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n\nfunction largeObject(sql, oid, mode = 0x00020000 | 0x00040000) {\n    return new Promise(async (resolve, reject)=>{\n        await sql.begin(async (sql)=>{\n            let finish;\n            !oid && ([{ oid }] = await sql`select lo_creat(-1) as oid`);\n            const [{ fd }] = await sql`select lo_open(${oid}, ${mode}) as fd`;\n            const lo = {\n                writable,\n                readable,\n                close: ()=>sql`select lo_close(${fd})`.then(finish),\n                tell: ()=>sql`select lo_tell64(${fd})`,\n                read: (x)=>sql`select loread(${fd}, ${x}) as data`,\n                write: (x)=>sql`select lowrite(${fd}, ${x})`,\n                truncate: (x)=>sql`select lo_truncate64(${fd}, ${x})`,\n                seek: (x, whence = 0)=>sql`select lo_lseek64(${fd}, ${x}, ${whence})`,\n                size: ()=>sql`\n          select\n            lo_lseek64(${fd}, location, 0) as position,\n            seek.size\n          from (\n            select\n              lo_lseek64($1, 0, 2) as size,\n              tell.location\n            from (select lo_tell64($1) as location) tell\n          ) seek\n        `\n            };\n            resolve(lo);\n            return new Promise(async (r)=>finish = r);\n            async function readable({ highWaterMark = 2048 * 8, start = 0, end = Infinity } = {}) {\n                let max = end - start;\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Readable({\n                    highWaterMark,\n                    async read (size) {\n                        const l = size > max ? size - max : size;\n                        max -= size;\n                        const [{ data }] = await lo.read(l);\n                        this.push(data);\n                        if (data.length < size) this.push(null);\n                    }\n                });\n            }\n            async function writable({ highWaterMark = 2048 * 8, start = 0 } = {}) {\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Writable({\n                    highWaterMark,\n                    write (chunk, encoding, callback) {\n                        lo.write(chunk).then(()=>callback(), callback);\n                    }\n                });\n            }\n        }).catch(reject);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2xhcmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJCO0FBRVosU0FBU0MsWUFBWUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sYUFBYSxVQUFVO0lBQzFFLE9BQU8sSUFBSUMsUUFBUSxPQUFNQyxTQUFTQztRQUNoQyxNQUFNTCxJQUFJTSxLQUFLLENBQUMsT0FBTU47WUFDcEIsSUFBSU87WUFDSixDQUFDTixPQUFRLEVBQUMsRUFBRUEsR0FBRyxFQUFFLENBQUMsR0FBRyxNQUFNRCxHQUFHLENBQUMsMEJBQTBCLENBQUM7WUFDMUQsTUFBTSxDQUFDLEVBQUVRLEVBQUUsRUFBRSxDQUFDLEdBQUcsTUFBTVIsR0FBRyxDQUFDLGVBQWUsRUFBR0MsSUFBSyxFQUFFLEVBQUdDLEtBQU0sT0FBTyxDQUFDO1lBRXJFLE1BQU1PLEtBQUs7Z0JBQ1RDO2dCQUNBQztnQkFDQUMsT0FBWSxJQUFNWixHQUFHLENBQUMsZ0JBQWdCLEVBQUdRLEdBQUksQ0FBQyxDQUFDLENBQUNLLElBQUksQ0FBQ047Z0JBQ3JETyxNQUFZLElBQU1kLEdBQUcsQ0FBQyxpQkFBaUIsRUFBR1EsR0FBSSxDQUFDLENBQUM7Z0JBQ2hETyxNQUFZLENBQUNDLElBQU1oQixHQUFHLENBQUMsY0FBYyxFQUFHUSxHQUFJLEVBQUUsRUFBR1EsRUFBRyxTQUFTLENBQUM7Z0JBQzlEQyxPQUFZLENBQUNELElBQU1oQixHQUFHLENBQUMsZUFBZSxFQUFHUSxHQUFJLEVBQUUsRUFBR1EsRUFBRyxDQUFDLENBQUM7Z0JBQ3ZERSxVQUFZLENBQUNGLElBQU1oQixHQUFHLENBQUMscUJBQXFCLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLENBQUMsQ0FBQztnQkFDN0RHLE1BQVksQ0FBQ0gsR0FBR0ksU0FBUyxDQUFDLEdBQUtwQixHQUFHLENBQUMsa0JBQWtCLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLEVBQUUsRUFBR0ksT0FBUSxDQUFDLENBQUM7Z0JBQ25GQyxNQUFZLElBQU1yQixHQUFHLENBQUM7O3VCQUVQLEVBQUdRLEdBQUk7Ozs7Ozs7O1FBUXRCLENBQUM7WUFDSDtZQUVBSixRQUFRSztZQUVSLE9BQU8sSUFBSU4sUUFBUSxPQUFNbUIsSUFBS2YsU0FBU2U7WUFFdkMsZUFBZVgsU0FBUyxFQUN0QlksZ0JBQWdCLE9BQU8sQ0FBQyxFQUN4QkMsUUFBUSxDQUFDLEVBQ1RDLE1BQU1DLFFBQVEsRUFDZixHQUFHLENBQUMsQ0FBQztnQkFDSixJQUFJQyxNQUFNRixNQUFNRDtnQkFDaEJBLFNBQVMsTUFBTWYsR0FBR1UsSUFBSSxDQUFDSztnQkFDdkIsT0FBTyxJQUFJMUIsNENBQWUsQ0FBQztvQkFDekJ5QjtvQkFDQSxNQUFNUixNQUFLTSxJQUFJO3dCQUNiLE1BQU1RLElBQUlSLE9BQU9NLE1BQU1OLE9BQU9NLE1BQU1OO3dCQUNwQ00sT0FBT047d0JBQ1AsTUFBTSxDQUFDLEVBQUVTLElBQUksRUFBRSxDQUFDLEdBQUcsTUFBTXJCLEdBQUdNLElBQUksQ0FBQ2M7d0JBQ2pDLElBQUksQ0FBQ0UsSUFBSSxDQUFDRDt3QkFDVixJQUFJQSxLQUFLRSxNQUFNLEdBQUdYLE1BQ2hCLElBQUksQ0FBQ1UsSUFBSSxDQUFDO29CQUNkO2dCQUNGO1lBQ0Y7WUFFQSxlQUFlckIsU0FBUyxFQUN0QmEsZ0JBQWdCLE9BQU8sQ0FBQyxFQUN4QkMsUUFBUSxDQUFDLEVBQ1YsR0FBRyxDQUFDLENBQUM7Z0JBQ0pBLFNBQVMsTUFBTWYsR0FBR1UsSUFBSSxDQUFDSztnQkFDdkIsT0FBTyxJQUFJMUIsNENBQWUsQ0FBQztvQkFDekJ5QjtvQkFDQU4sT0FBTWlCLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxRQUFRO3dCQUM3QjNCLEdBQUdRLEtBQUssQ0FBQ2lCLE9BQU9yQixJQUFJLENBQUMsSUFBTXVCLFlBQVlBO29CQUN6QztnQkFDRjtZQUNGO1FBQ0YsR0FBR0MsS0FBSyxDQUFDaEM7SUFDWDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXBlcmZvcm1hbmNlLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3Bvc3RncmVzL3NyYy9sYXJnZS5qcz82NmMzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJ1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYXJnZU9iamVjdChzcWwsIG9pZCwgbW9kZSA9IDB4MDAwMjAwMDAgfCAweDAwMDQwMDAwKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyhyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBhd2FpdCBzcWwuYmVnaW4oYXN5bmMgc3FsID0+IHtcbiAgICAgIGxldCBmaW5pc2hcbiAgICAgICFvaWQgJiYgKFt7IG9pZCB9XSA9IGF3YWl0IHNxbGBzZWxlY3QgbG9fY3JlYXQoLTEpIGFzIG9pZGApXG4gICAgICBjb25zdCBbeyBmZCB9XSA9IGF3YWl0IHNxbGBzZWxlY3QgbG9fb3BlbigkeyBvaWQgfSwgJHsgbW9kZSB9KSBhcyBmZGBcblxuICAgICAgY29uc3QgbG8gPSB7XG4gICAgICAgIHdyaXRhYmxlLFxuICAgICAgICByZWFkYWJsZSxcbiAgICAgICAgY2xvc2UgICAgIDogKCkgPT4gc3FsYHNlbGVjdCBsb19jbG9zZSgkeyBmZCB9KWAudGhlbihmaW5pc2gpLFxuICAgICAgICB0ZWxsICAgICAgOiAoKSA9PiBzcWxgc2VsZWN0IGxvX3RlbGw2NCgkeyBmZCB9KWAsXG4gICAgICAgIHJlYWQgICAgICA6ICh4KSA9PiBzcWxgc2VsZWN0IGxvcmVhZCgkeyBmZCB9LCAkeyB4IH0pIGFzIGRhdGFgLFxuICAgICAgICB3cml0ZSAgICAgOiAoeCkgPT4gc3FsYHNlbGVjdCBsb3dyaXRlKCR7IGZkIH0sICR7IHggfSlgLFxuICAgICAgICB0cnVuY2F0ZSAgOiAoeCkgPT4gc3FsYHNlbGVjdCBsb190cnVuY2F0ZTY0KCR7IGZkIH0sICR7IHggfSlgLFxuICAgICAgICBzZWVrICAgICAgOiAoeCwgd2hlbmNlID0gMCkgPT4gc3FsYHNlbGVjdCBsb19sc2VlazY0KCR7IGZkIH0sICR7IHggfSwgJHsgd2hlbmNlIH0pYCxcbiAgICAgICAgc2l6ZSAgICAgIDogKCkgPT4gc3FsYFxuICAgICAgICAgIHNlbGVjdFxuICAgICAgICAgICAgbG9fbHNlZWs2NCgkeyBmZCB9LCBsb2NhdGlvbiwgMCkgYXMgcG9zaXRpb24sXG4gICAgICAgICAgICBzZWVrLnNpemVcbiAgICAgICAgICBmcm9tIChcbiAgICAgICAgICAgIHNlbGVjdFxuICAgICAgICAgICAgICBsb19sc2VlazY0KCQxLCAwLCAyKSBhcyBzaXplLFxuICAgICAgICAgICAgICB0ZWxsLmxvY2F0aW9uXG4gICAgICAgICAgICBmcm9tIChzZWxlY3QgbG9fdGVsbDY0KCQxKSBhcyBsb2NhdGlvbikgdGVsbFxuICAgICAgICAgICkgc2Vla1xuICAgICAgICBgXG4gICAgICB9XG5cbiAgICAgIHJlc29sdmUobG8pXG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyByID0+IGZpbmlzaCA9IHIpXG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIHJlYWRhYmxlKHtcbiAgICAgICAgaGlnaFdhdGVyTWFyayA9IDIwNDggKiA4LFxuICAgICAgICBzdGFydCA9IDAsXG4gICAgICAgIGVuZCA9IEluZmluaXR5XG4gICAgICB9ID0ge30pIHtcbiAgICAgICAgbGV0IG1heCA9IGVuZCAtIHN0YXJ0XG4gICAgICAgIHN0YXJ0ICYmIGF3YWl0IGxvLnNlZWsoc3RhcnQpXG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtLlJlYWRhYmxlKHtcbiAgICAgICAgICBoaWdoV2F0ZXJNYXJrLFxuICAgICAgICAgIGFzeW5jIHJlYWQoc2l6ZSkge1xuICAgICAgICAgICAgY29uc3QgbCA9IHNpemUgPiBtYXggPyBzaXplIC0gbWF4IDogc2l6ZVxuICAgICAgICAgICAgbWF4IC09IHNpemVcbiAgICAgICAgICAgIGNvbnN0IFt7IGRhdGEgfV0gPSBhd2FpdCBsby5yZWFkKGwpXG4gICAgICAgICAgICB0aGlzLnB1c2goZGF0YSlcbiAgICAgICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNpemUpXG4gICAgICAgICAgICAgIHRoaXMucHVzaChudWxsKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgYXN5bmMgZnVuY3Rpb24gd3JpdGFibGUoe1xuICAgICAgICBoaWdoV2F0ZXJNYXJrID0gMjA0OCAqIDgsXG4gICAgICAgIHN0YXJ0ID0gMFxuICAgICAgfSA9IHt9KSB7XG4gICAgICAgIHN0YXJ0ICYmIGF3YWl0IGxvLnNlZWsoc3RhcnQpXG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtLldyaXRhYmxlKHtcbiAgICAgICAgICBoaWdoV2F0ZXJNYXJrLFxuICAgICAgICAgIHdyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIGxvLndyaXRlKGNodW5rKS50aGVuKCgpID0+IGNhbGxiYWNrKCksIGNhbGxiYWNrKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KS5jYXRjaChyZWplY3QpXG4gIH0pXG59XG4iXSwibmFtZXMiOlsiU3RyZWFtIiwibGFyZ2VPYmplY3QiLCJzcWwiLCJvaWQiLCJtb2RlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJiZWdpbiIsImZpbmlzaCIsImZkIiwibG8iLCJ3cml0YWJsZSIsInJlYWRhYmxlIiwiY2xvc2UiLCJ0aGVuIiwidGVsbCIsInJlYWQiLCJ4Iiwid3JpdGUiLCJ0cnVuY2F0ZSIsInNlZWsiLCJ3aGVuY2UiLCJzaXplIiwiciIsImhpZ2hXYXRlck1hcmsiLCJzdGFydCIsImVuZCIsIkluZmluaXR5IiwibWF4IiwiUmVhZGFibGUiLCJsIiwiZGF0YSIsInB1c2giLCJsZW5ndGgiLCJXcml0YWJsZSIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsImNhdGNoIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/large.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/query.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/query.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLOSE: () => (/* binding */ CLOSE),\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\nconst originCache = new Map(), originStackCache = new Map(), originError = Symbol(\"OriginError\");\nconst CLOSE = {};\nclass Query extends Promise {\n    constructor(strings, args, handler, canceller, options = {}){\n        let resolve, reject;\n        super((a, b)=>{\n            resolve = a;\n            reject = b;\n        });\n        this.tagged = Array.isArray(strings.raw);\n        this.strings = strings;\n        this.args = args;\n        this.handler = handler;\n        this.canceller = canceller;\n        this.options = options;\n        this.state = null;\n        this.statement = null;\n        this.resolve = (x)=>(this.active = false, resolve(x));\n        this.reject = (x)=>(this.active = false, reject(x));\n        this.active = false;\n        this.cancelled = null;\n        this.executed = false;\n        this.signature = \"\";\n        this[originError] = this.handler.debug ? new Error() : this.tagged && cachedError(this.strings);\n    }\n    get origin() {\n        return (this.handler.debug ? this[originError].stack : this.tagged && originStackCache.has(this.strings) ? originStackCache.get(this.strings) : originStackCache.set(this.strings, this[originError].stack).get(this.strings)) || \"\";\n    }\n    static get [Symbol.species]() {\n        return Promise;\n    }\n    cancel() {\n        return this.canceller && (this.canceller(this), this.canceller = null);\n    }\n    simple() {\n        this.options.simple = true;\n        this.options.prepare = false;\n        return this;\n    }\n    async readable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    async writable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    cursor(rows = 1, fn) {\n        this.options.simple = false;\n        if (typeof rows === \"function\") {\n            fn = rows;\n            rows = 1;\n        }\n        this.cursorRows = rows;\n        if (typeof fn === \"function\") return this.cursorFn = fn, this;\n        let prev;\n        return {\n            [Symbol.asyncIterator]: ()=>({\n                    next: ()=>{\n                        if (this.executed && !this.active) return {\n                            done: true\n                        };\n                        prev && prev();\n                        const promise = new Promise((resolve, reject)=>{\n                            this.cursorFn = (value)=>{\n                                resolve({\n                                    value,\n                                    done: false\n                                });\n                                return new Promise((r)=>prev = r);\n                            };\n                            this.resolve = ()=>(this.active = false, resolve({\n                                    done: true\n                                }));\n                            this.reject = (x)=>(this.active = false, reject(x));\n                        });\n                        this.execute();\n                        return promise;\n                    },\n                    return () {\n                        prev && prev(CLOSE);\n                        return {\n                            done: true\n                        };\n                    }\n                })\n        };\n    }\n    describe() {\n        this.options.simple = false;\n        this.onlyDescribe = this.options.prepare = true;\n        return this;\n    }\n    stream() {\n        throw new Error(\".stream has been renamed to .forEach\");\n    }\n    forEach(fn) {\n        this.forEachFn = fn;\n        this.handle();\n        return this;\n    }\n    raw() {\n        this.isRaw = true;\n        return this;\n    }\n    values() {\n        this.isRaw = \"values\";\n        return this;\n    }\n    async handle() {\n        !this.executed && (this.executed = true) && await 1 && this.handler(this);\n    }\n    execute() {\n        this.handle();\n        return this;\n    }\n    then() {\n        this.handle();\n        return super.then.apply(this, arguments);\n    }\n    catch() {\n        this.handle();\n        return super.catch.apply(this, arguments);\n    }\n    finally() {\n        this.handle();\n        return super.finally.apply(this, arguments);\n    }\n}\nfunction cachedError(xs) {\n    if (originCache.has(xs)) return originCache.get(xs);\n    const x = Error.stackTraceLimit;\n    Error.stackTraceLimit = 4;\n    originCache.set(xs, new Error());\n    Error.stackTraceLimit = x;\n    return originCache.get(xs);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/queue.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/queue.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Queue);\nfunction Queue(initial = []) {\n    let xs = initial.slice();\n    let index = 0;\n    return {\n        get length () {\n            return xs.length - index;\n        },\n        remove: (x)=>{\n            const index = xs.indexOf(x);\n            return index === -1 ? null : (xs.splice(index, 1), x);\n        },\n        push: (x)=>(xs.push(x), x),\n        shift: ()=>{\n            const out = xs[index++];\n            if (index === xs.length) {\n                index = 0;\n                xs = [];\n            } else {\n                xs[index - 1] = undefined;\n            }\n            return out;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL3F1ZXVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZUEsS0FBS0EsRUFBQTtBQUVwQixTQUFTQSxNQUFNQyxVQUFVLEVBQUU7SUFDekIsSUFBSUMsS0FBS0QsUUFBUUUsS0FBSztJQUN0QixJQUFJQyxRQUFRO0lBRVosT0FBTztRQUNMLElBQUlDLFVBQVM7WUFDWCxPQUFPSCxHQUFHRyxNQUFNLEdBQUdEO1FBQ3JCO1FBQ0FFLFFBQVEsQ0FBQ0M7WUFDUCxNQUFNSCxRQUFRRixHQUFHTSxPQUFPLENBQUNEO1lBQ3pCLE9BQU9ILFVBQVUsQ0FBQyxJQUNkLE9BQ0NGLENBQUFBLEdBQUdPLE1BQU0sQ0FBQ0wsT0FBTyxJQUFJRyxDQUFBQTtRQUM1QjtRQUNBRyxNQUFNLENBQUNILElBQU9MLENBQUFBLEdBQUdRLElBQUksQ0FBQ0gsSUFBSUEsQ0FBQUE7UUFDMUJJLE9BQU87WUFDTCxNQUFNQyxNQUFNVixFQUFFLENBQUNFLFFBQVE7WUFFdkIsSUFBSUEsVUFBVUYsR0FBR0csTUFBTSxFQUFFO2dCQUN2QkQsUUFBUTtnQkFDUkYsS0FBSyxFQUFFO1lBQ1QsT0FBTztnQkFDTEEsRUFBRSxDQUFDRSxRQUFRLEVBQUUsR0FBR1M7WUFDbEI7WUFFQSxPQUFPRDtRQUNUO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3N5c3RlbS1wZXJmb3JtYW5jZS1tb25pdG9yLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvcXVldWUuanM/M2NmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBRdWV1ZVxuXG5mdW5jdGlvbiBRdWV1ZShpbml0aWFsID0gW10pIHtcbiAgbGV0IHhzID0gaW5pdGlhbC5zbGljZSgpXG4gIGxldCBpbmRleCA9IDBcblxuICByZXR1cm4ge1xuICAgIGdldCBsZW5ndGgoKSB7XG4gICAgICByZXR1cm4geHMubGVuZ3RoIC0gaW5kZXhcbiAgICB9LFxuICAgIHJlbW92ZTogKHgpID0+IHtcbiAgICAgIGNvbnN0IGluZGV4ID0geHMuaW5kZXhPZih4KVxuICAgICAgcmV0dXJuIGluZGV4ID09PSAtMVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiAoeHMuc3BsaWNlKGluZGV4LCAxKSwgeClcbiAgICB9LFxuICAgIHB1c2g6ICh4KSA9PiAoeHMucHVzaCh4KSwgeCksXG4gICAgc2hpZnQ6ICgpID0+IHtcbiAgICAgIGNvbnN0IG91dCA9IHhzW2luZGV4KytdXG5cbiAgICAgIGlmIChpbmRleCA9PT0geHMubGVuZ3RoKSB7XG4gICAgICAgIGluZGV4ID0gMFxuICAgICAgICB4cyA9IFtdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4c1tpbmRleCAtIDFdID0gdW5kZWZpbmVkXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXRcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJRdWV1ZSIsImluaXRpYWwiLCJ4cyIsInNsaWNlIiwiaW5kZXgiLCJsZW5ndGgiLCJyZW1vdmUiLCJ4IiwiaW5kZXhPZiIsInNwbGljZSIsInB1c2giLCJzaGlmdCIsIm91dCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/queue.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/result.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres/src/result.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Result)\n/* harmony export */ });\nclass Result extends Array {\n    constructor(){\n        super();\n        Object.defineProperties(this, {\n            count: {\n                value: null,\n                writable: true\n            },\n            state: {\n                value: null,\n                writable: true\n            },\n            command: {\n                value: null,\n                writable: true\n            },\n            columns: {\n                value: null,\n                writable: true\n            },\n            statement: {\n                value: null,\n                writable: true\n            }\n        });\n    }\n    static get [Symbol.species]() {\n        return Array;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL3Jlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWUsTUFBTUEsZUFBZUM7SUFDbENDLGFBQWM7UUFDWixLQUFLO1FBQ0xDLE9BQU9DLGdCQUFnQixDQUFDLElBQUksRUFBRTtZQUM1QkMsT0FBTztnQkFBRUMsT0FBTztnQkFBTUMsVUFBVTtZQUFLO1lBQ3JDQyxPQUFPO2dCQUFFRixPQUFPO2dCQUFNQyxVQUFVO1lBQUs7WUFDckNFLFNBQVM7Z0JBQUVILE9BQU87Z0JBQU1DLFVBQVU7WUFBSztZQUN2Q0csU0FBUztnQkFBRUosT0FBTztnQkFBTUMsVUFBVTtZQUFLO1lBQ3ZDSSxXQUFXO2dCQUFFTCxPQUFPO2dCQUFNQyxVQUFVO1lBQUs7UUFDM0M7SUFDRjtJQUVBLFdBQVcsQ0FBQ0ssT0FBT0MsT0FBTyxDQUFDLEdBQUc7UUFDNUIsT0FBT1o7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3lzdGVtLXBlcmZvcm1hbmNlLW1vbml0b3ItZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3Bvc3RncmVzL3NyYy9yZXN1bHQuanM/ZjVkMCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBSZXN1bHQgZXh0ZW5kcyBBcnJheSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKClcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBjb3VudDogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgIHN0YXRlOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgY29tbWFuZDogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgIGNvbHVtbnM6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBzdGF0ZW1lbnQ6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH1cbiAgICB9KVxuICB9XG5cbiAgc3RhdGljIGdldCBbU3ltYm9sLnNwZWNpZXNdKCkge1xuICAgIHJldHVybiBBcnJheVxuICB9XG59XG4iXSwibmFtZXMiOlsiUmVzdWx0IiwiQXJyYXkiLCJjb25zdHJ1Y3RvciIsIk9iamVjdCIsImRlZmluZVByb3BlcnRpZXMiLCJjb3VudCIsInZhbHVlIiwid3JpdGFibGUiLCJzdGF0ZSIsImNvbW1hbmQiLCJjb2x1bW5zIiwic3RhdGVtZW50IiwiU3ltYm9sIiwic3BlY2llcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/result.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/subscribe.js":
/*!************************************************!*\
  !*** ./node_modules/postgres/src/subscribe.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Subscribe)\n/* harmony export */ });\nconst noop = ()=>{};\nfunction Subscribe(postgres, options) {\n    const subscribers = new Map(), slot = \"postgresjs_\" + Math.random().toString(36).slice(2), state = {};\n    let connection, stream, ended = false;\n    const sql = subscribe.sql = postgres({\n        ...options,\n        transform: {\n            column: {},\n            value: {},\n            row: {}\n        },\n        max: 1,\n        fetch_types: false,\n        idle_timeout: null,\n        max_lifetime: null,\n        connection: {\n            ...options.connection,\n            replication: \"database\"\n        },\n        onclose: async function() {\n            if (ended) return;\n            stream = null;\n            state.pid = state.secret = undefined;\n            connected(await init(sql, slot, options.publications));\n            subscribers.forEach((event)=>event.forEach(({ onsubscribe })=>onsubscribe()));\n        },\n        no_subscribe: true\n    });\n    const end = sql.end, close = sql.close;\n    sql.end = async ()=>{\n        ended = true;\n        stream && await new Promise((r)=>(stream.once(\"close\", r), stream.end()));\n        return end();\n    };\n    sql.close = async ()=>{\n        stream && await new Promise((r)=>(stream.once(\"close\", r), stream.end()));\n        return close();\n    };\n    return subscribe;\n    async function subscribe(event, fn, onsubscribe = noop, onerror = noop) {\n        event = parseEvent(event);\n        if (!connection) connection = init(sql, slot, options.publications);\n        const subscriber = {\n            fn,\n            onsubscribe\n        };\n        const fns = subscribers.has(event) ? subscribers.get(event).add(subscriber) : subscribers.set(event, new Set([\n            subscriber\n        ])).get(event);\n        const unsubscribe = ()=>{\n            fns.delete(subscriber);\n            fns.size === 0 && subscribers.delete(event);\n        };\n        return connection.then((x)=>{\n            connected(x);\n            onsubscribe();\n            stream && stream.on(\"error\", onerror);\n            return {\n                unsubscribe,\n                state,\n                sql\n            };\n        });\n    }\n    function connected(x) {\n        stream = x.stream;\n        state.pid = x.state.pid;\n        state.secret = x.state.secret;\n    }\n    async function init(sql, slot, publications) {\n        if (!publications) throw new Error(\"Missing publication names\");\n        const xs = await sql.unsafe(`CREATE_REPLICATION_SLOT ${slot} TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`);\n        const [x] = xs;\n        const stream = await sql.unsafe(`START_REPLICATION SLOT ${slot} LOGICAL ${x.consistent_point} (proto_version '1', publication_names '${publications}')`).writable();\n        const state = {\n            lsn: Buffer.concat(x.consistent_point.split(\"/\").map((x)=>Buffer.from((\"00000000\" + x).slice(-8), \"hex\")))\n        };\n        stream.on(\"data\", data);\n        stream.on(\"error\", error);\n        stream.on(\"close\", sql.close);\n        return {\n            stream,\n            state: xs.state\n        };\n        function error(e) {\n            console.error(\"Unexpected error during logical streaming - reconnecting\", e) // eslint-disable-line\n            ;\n        }\n        function data(x) {\n            if (x[0] === 0x77) {\n                parse(x.subarray(25), state, sql.options.parsers, handle, options.transform);\n            } else if (x[0] === 0x6b && x[17]) {\n                state.lsn = x.subarray(1, 9);\n                pong();\n            }\n        }\n        function handle(a, b) {\n            const path = b.relation.schema + \".\" + b.relation.table;\n            call(\"*\", a, b);\n            call(\"*:\" + path, a, b);\n            b.relation.keys.length && call(\"*:\" + path + \"=\" + b.relation.keys.map((x)=>a[x.name]), a, b);\n            call(b.command, a, b);\n            call(b.command + \":\" + path, a, b);\n            b.relation.keys.length && call(b.command + \":\" + path + \"=\" + b.relation.keys.map((x)=>a[x.name]), a, b);\n        }\n        function pong() {\n            const x = Buffer.alloc(34);\n            x[0] = \"r\".charCodeAt(0);\n            x.fill(state.lsn, 1);\n            x.writeBigInt64BE(BigInt(Date.now() - Date.UTC(2000, 0, 1)) * BigInt(1000), 25);\n            stream.write(x);\n        }\n    }\n    function call(x, a, b) {\n        subscribers.has(x) && subscribers.get(x).forEach(({ fn })=>fn(a, b, x));\n    }\n}\nfunction Time(x) {\n    return new Date(Date.UTC(2000, 0, 1) + Number(x / BigInt(1000)));\n}\nfunction parse(x, state, parsers, handle, transform) {\n    const char = (acc, [k, v])=>(acc[k.charCodeAt(0)] = v, acc);\n    Object.entries({\n        R: (x)=>{\n            let i = 1;\n            const r = state[x.readUInt32BE(i)] = {\n                schema: x.toString(\"utf8\", i += 4, i = x.indexOf(0, i)) || \"pg_catalog\",\n                table: x.toString(\"utf8\", i + 1, i = x.indexOf(0, i + 1)),\n                columns: Array(x.readUInt16BE(i += 2)),\n                keys: []\n            };\n            i += 2;\n            let columnIndex = 0, column;\n            while(i < x.length){\n                column = r.columns[columnIndex++] = {\n                    key: x[i++],\n                    name: transform.column.from ? transform.column.from(x.toString(\"utf8\", i, i = x.indexOf(0, i))) : x.toString(\"utf8\", i, i = x.indexOf(0, i)),\n                    type: x.readUInt32BE(i += 1),\n                    parser: parsers[x.readUInt32BE(i)],\n                    atttypmod: x.readUInt32BE(i += 4)\n                };\n                column.key && r.keys.push(column);\n                i += 4;\n            }\n        },\n        Y: ()=>{},\n        O: ()=>{},\n        B: (x)=>{\n            state.date = Time(x.readBigInt64BE(9));\n            state.lsn = x.subarray(1, 9);\n        },\n        I: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            const { row } = tuples(x, relation.columns, i += 7, transform);\n            handle(row, {\n                command: \"insert\",\n                relation\n            });\n        },\n        D: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            handle(key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform).row : null, {\n                command: \"delete\",\n                relation,\n                key\n            });\n        },\n        U: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            const xs = key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform) : null;\n            xs && (i = xs.i);\n            const { row } = tuples(x, relation.columns, i + 3, transform);\n            handle(row, {\n                command: \"update\",\n                relation,\n                key,\n                old: xs && xs.row\n            });\n        },\n        T: ()=>{},\n        C: ()=>{} // Commit\n    }).reduce(char, {})[x[0]](x);\n}\nfunction tuples(x, columns, xi, transform) {\n    let type, column, value;\n    const row = transform.raw ? new Array(columns.length) : {};\n    for(let i = 0; i < columns.length; i++){\n        type = x[xi++];\n        column = columns[i];\n        value = type === 110 // n\n         ? null : type === 117 // u\n         ? undefined : column.parser === undefined ? x.toString(\"utf8\", xi + 4, xi += 4 + x.readUInt32BE(xi)) : column.parser.array === true ? column.parser(x.toString(\"utf8\", xi + 5, xi += 4 + x.readUInt32BE(xi))) : column.parser(x.toString(\"utf8\", xi + 4, xi += 4 + x.readUInt32BE(xi)));\n        transform.raw ? row[i] = transform.raw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n    }\n    return {\n        i: xi,\n        row: transform.row.from ? transform.row.from(row) : row\n    };\n}\nfunction parseEvent(x) {\n    const xs = x.match(/^(\\*|insert|update|delete)?:?([^.]+?\\.?[^=]+)?=?(.+)?/i) || [];\n    if (!xs) throw new Error(\"Malformed subscribe pattern: \" + x);\n    const [, command, path, key] = xs;\n    return (command || \"*\") + (path ? \":\" + (path.indexOf(\".\") === -1 ? \"public.\" + path : path) : \"\") + (key ? \"=\" + key : \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/subscribe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/types.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/types.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Builder: () => (/* binding */ Builder),\n/* harmony export */   END: () => (/* binding */ END),\n/* harmony export */   Identifier: () => (/* binding */ Identifier),\n/* harmony export */   Parameter: () => (/* binding */ Parameter),\n/* harmony export */   arrayParser: () => (/* binding */ arrayParser),\n/* harmony export */   arraySerializer: () => (/* binding */ arraySerializer),\n/* harmony export */   camel: () => (/* binding */ camel),\n/* harmony export */   escapeIdentifier: () => (/* binding */ escapeIdentifier),\n/* harmony export */   fromCamel: () => (/* binding */ fromCamel),\n/* harmony export */   fromKebab: () => (/* binding */ fromKebab),\n/* harmony export */   fromPascal: () => (/* binding */ fromPascal),\n/* harmony export */   handleValue: () => (/* binding */ handleValue),\n/* harmony export */   inferType: () => (/* binding */ inferType),\n/* harmony export */   kebab: () => (/* binding */ kebab),\n/* harmony export */   mergeUserTypes: () => (/* binding */ mergeUserTypes),\n/* harmony export */   parsers: () => (/* binding */ parsers),\n/* harmony export */   pascal: () => (/* binding */ pascal),\n/* harmony export */   serializers: () => (/* binding */ serializers),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   toCamel: () => (/* binding */ toCamel),\n/* harmony export */   toKebab: () => (/* binding */ toKebab),\n/* harmony export */   toPascal: () => (/* binding */ toPascal),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./query.js */ \"(rsc)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/postgres/src/errors.js\");\n\n\nconst types = {\n    string: {\n        to: 25,\n        from: null,\n        serialize: (x)=>\"\" + x\n    },\n    number: {\n        to: 0,\n        from: [\n            21,\n            23,\n            26,\n            700,\n            701\n        ],\n        serialize: (x)=>\"\" + x,\n        parse: (x)=>+x\n    },\n    json: {\n        to: 114,\n        from: [\n            114,\n            3802\n        ],\n        serialize: (x)=>JSON.stringify(x),\n        parse: (x)=>JSON.parse(x)\n    },\n    boolean: {\n        to: 16,\n        from: 16,\n        serialize: (x)=>x === true ? \"t\" : \"f\",\n        parse: (x)=>x === \"t\"\n    },\n    date: {\n        to: 1184,\n        from: [\n            1082,\n            1114,\n            1184\n        ],\n        serialize: (x)=>(x instanceof Date ? x : new Date(x)).toISOString(),\n        parse: (x)=>new Date(x)\n    },\n    bytea: {\n        to: 17,\n        from: 17,\n        serialize: (x)=>\"\\\\x\" + Buffer.from(x).toString(\"hex\"),\n        parse: (x)=>Buffer.from(x.slice(2), \"hex\")\n    }\n};\nclass NotTagged {\n    then() {\n        notTagged();\n    }\n    catch() {\n        notTagged();\n    }\n    finally() {\n        notTagged();\n    }\n}\nclass Identifier extends NotTagged {\n    constructor(value){\n        super();\n        this.value = escapeIdentifier(value);\n    }\n}\nclass Parameter extends NotTagged {\n    constructor(value, type, array){\n        super();\n        this.value = value;\n        this.type = type;\n        this.array = array;\n    }\n}\nclass Builder extends NotTagged {\n    constructor(first, rest){\n        super();\n        this.first = first;\n        this.rest = rest;\n    }\n    build(before, parameters, types, options) {\n        const keyword = builders.map(([x, fn])=>({\n                fn,\n                i: before.search(x)\n            })).sort((a, b)=>a.i - b.i).pop();\n        return keyword.i === -1 ? escapeIdentifiers(this.first, options) : keyword.fn(this.first, this.rest, parameters, types, options);\n    }\n}\nfunction handleValue(x, parameters, types, options) {\n    let value = x instanceof Parameter ? x.value : x;\n    if (value === undefined) {\n        x instanceof Parameter ? x.value = options.transform.undefined : value = x = options.transform.undefined;\n        if (value === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"UNDEFINED_VALUE\", \"Undefined values are not allowed\");\n    }\n    return \"$\" + types.push(x instanceof Parameter ? (parameters.push(x.value), x.array ? x.array[x.type || inferType(x.value)] || x.type || firstIsString(x.value) : x.type) : (parameters.push(x), inferType(x)));\n}\nconst defaultHandlers = typeHandlers(types);\nfunction stringify(q, string, value, parameters, types, options) {\n    for(let i = 1; i < q.strings.length; i++){\n        string += stringifyValue(string, value, parameters, types, options) + q.strings[i];\n        value = q.args[i];\n    }\n    return string;\n}\nfunction stringifyValue(string, value, parameters, types, o) {\n    return value instanceof Builder ? value.build(string, parameters, types, o) : value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, o) : value instanceof Identifier ? value.value : value && value[0] instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? value.reduce((acc, x)=>acc + \" \" + fragment(x, parameters, types, o), \"\") : handleValue(value, parameters, types, o);\n}\nfunction fragment(q, parameters, types, options) {\n    q.fragment = true;\n    return stringify(q, q.strings[0], q.args[0], parameters, types, options);\n}\nfunction valuesBuilder(first, parameters, types, columns, options) {\n    return first.map((row)=>\"(\" + columns.map((column)=>stringifyValue(\"values\", row[column], parameters, types, options)).join(\",\") + \")\").join(\",\");\n}\nfunction values(first, rest, parameters, types, options) {\n    const multi = Array.isArray(first[0]);\n    const columns = rest.length ? rest.flat() : Object.keys(multi ? first[0] : first);\n    return valuesBuilder(multi ? first : [\n        first\n    ], parameters, types, columns, options);\n}\nfunction select(first, rest, parameters, types, options) {\n    typeof first === \"string\" && (first = [\n        first\n    ].concat(rest));\n    if (Array.isArray(first)) return escapeIdentifiers(first, options);\n    let value;\n    const columns = rest.length ? rest.flat() : Object.keys(first);\n    return columns.map((x)=>{\n        value = first[x];\n        return (value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, options) : value instanceof Identifier ? value.value : handleValue(value, parameters, types, options)) + \" as \" + escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x);\n    }).join(\",\");\n}\nconst builders = Object.entries({\n    values,\n    in: (...xs)=>{\n        const x = values(...xs);\n        return x === \"()\" ? \"(null)\" : x;\n    },\n    select,\n    as: select,\n    returning: select,\n    \"\\\\(\": select,\n    update (first, rest, parameters, types, options) {\n        return (rest.length ? rest.flat() : Object.keys(first)).map((x)=>escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x) + \"=\" + stringifyValue(\"values\", first[x], parameters, types, options));\n    },\n    insert (first, rest, parameters, types, options) {\n        const columns = rest.length ? rest.flat() : Object.keys(Array.isArray(first) ? first[0] : first);\n        return \"(\" + escapeIdentifiers(columns, options) + \")values\" + valuesBuilder(Array.isArray(first) ? first : [\n            first\n        ], parameters, types, columns, options);\n    }\n}).map(([x, fn])=>[\n        new RegExp(\"((?:^|[\\\\s(])\" + x + \"(?:$|[\\\\s(]))(?![\\\\s\\\\S]*\\\\1)\", \"i\"),\n        fn\n    ]);\nfunction notTagged() {\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"NOT_TAGGED_CALL\", \"Query not called as a tagged template literal\");\n}\nconst serializers = defaultHandlers.serializers;\nconst parsers = defaultHandlers.parsers;\nconst END = {};\nfunction firstIsString(x) {\n    if (Array.isArray(x)) return firstIsString(x[0]);\n    return typeof x === \"string\" ? 1009 : 0;\n}\nconst mergeUserTypes = function(types) {\n    const user = typeHandlers(types || {});\n    return {\n        serializers: Object.assign({}, serializers, user.serializers),\n        parsers: Object.assign({}, parsers, user.parsers)\n    };\n};\nfunction typeHandlers(types) {\n    return Object.keys(types).reduce((acc, k)=>{\n        types[k].from && [].concat(types[k].from).forEach((x)=>acc.parsers[x] = types[k].parse);\n        if (types[k].serialize) {\n            acc.serializers[types[k].to] = types[k].serialize;\n            types[k].from && [].concat(types[k].from).forEach((x)=>acc.serializers[x] = types[k].serialize);\n        }\n        return acc;\n    }, {\n        parsers: {},\n        serializers: {}\n    });\n}\nfunction escapeIdentifiers(xs, { transform: { column } }) {\n    return xs.map((x)=>escapeIdentifier(column.to ? column.to(x) : x)).join(\",\");\n}\nconst escapeIdentifier = function escape(str) {\n    return '\"' + str.replace(/\"/g, '\"\"').replace(/\\./g, '\".\"') + '\"';\n};\nconst inferType = function inferType(x) {\n    return x instanceof Parameter ? x.type : x instanceof Date ? 1184 : x instanceof Uint8Array ? 17 : x === true || x === false ? 16 : typeof x === \"bigint\" ? 20 : Array.isArray(x) ? inferType(x[0]) : 0;\n};\nconst escapeBackslash = /\\\\/g;\nconst escapeQuote = /\"/g;\nfunction arrayEscape(x) {\n    return x.replace(escapeBackslash, \"\\\\\\\\\").replace(escapeQuote, '\\\\\"');\n}\nconst arraySerializer = function arraySerializer(xs, serializer, options, typarray) {\n    if (Array.isArray(xs) === false) return xs;\n    if (!xs.length) return \"{}\";\n    const first = xs[0];\n    // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n    const delimiter = typarray === 1020 ? \";\" : \",\";\n    if (Array.isArray(first) && !first.type) return \"{\" + xs.map((x)=>arraySerializer(x, serializer, options, typarray)).join(delimiter) + \"}\";\n    return \"{\" + xs.map((x)=>{\n        if (x === undefined) {\n            x = options.transform.undefined;\n            if (x === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"UNDEFINED_VALUE\", \"Undefined values are not allowed\");\n        }\n        return x === null ? \"null\" : '\"' + arrayEscape(serializer ? serializer(x.type ? x.value : x) : \"\" + x) + '\"';\n    }).join(delimiter) + \"}\";\n};\nconst arrayParserState = {\n    i: 0,\n    char: null,\n    str: \"\",\n    quoted: false,\n    last: 0\n};\nconst arrayParser = function arrayParser(x, parser, typarray) {\n    arrayParserState.i = arrayParserState.last = 0;\n    return arrayParserLoop(arrayParserState, x, parser, typarray);\n};\nfunction arrayParserLoop(s, x, parser, typarray) {\n    const xs = [];\n    // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n    const delimiter = typarray === 1020 ? \";\" : \",\";\n    for(; s.i < x.length; s.i++){\n        s.char = x[s.i];\n        if (s.quoted) {\n            if (s.char === \"\\\\\") {\n                s.str += x[++s.i];\n            } else if (s.char === '\"') {\n                xs.push(parser ? parser(s.str) : s.str);\n                s.str = \"\";\n                s.quoted = x[s.i + 1] === '\"';\n                s.last = s.i + 2;\n            } else {\n                s.str += s.char;\n            }\n        } else if (s.char === '\"') {\n            s.quoted = true;\n        } else if (s.char === \"{\") {\n            s.last = ++s.i;\n            xs.push(arrayParserLoop(s, x, parser, typarray));\n        } else if (s.char === \"}\") {\n            s.quoted = false;\n            s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n            break;\n        } else if (s.char === delimiter && s.p !== \"}\" && s.p !== '\"') {\n            xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n        }\n        s.p = s.char;\n    }\n    s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1));\n    return xs;\n}\nconst toCamel = (x)=>{\n    let str = x[0];\n    for(let i = 1; i < x.length; i++)str += x[i] === \"_\" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toPascal = (x)=>{\n    let str = x[0].toUpperCase();\n    for(let i = 1; i < x.length; i++)str += x[i] === \"_\" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toKebab = (x)=>x.replace(/_/g, \"-\");\nconst fromCamel = (x)=>x.replace(/([A-Z])/g, \"_$1\").toLowerCase();\nconst fromPascal = (x)=>(x.slice(0, 1) + x.slice(1).replace(/([A-Z])/g, \"_$1\")).toLowerCase();\nconst fromKebab = (x)=>x.replace(/-/g, \"_\");\nfunction createJsonTransform(fn) {\n    return function jsonTransform(x, column) {\n        return typeof x === \"object\" && x !== null && (column.type === 114 || column.type === 3802) ? Array.isArray(x) ? x.map((x)=>jsonTransform(x, column)) : Object.entries(x).reduce((acc, [k, v])=>Object.assign(acc, {\n                [fn(k)]: jsonTransform(v, column)\n            }), {}) : x;\n    };\n}\ntoCamel.column = {\n    from: toCamel\n};\ntoCamel.value = {\n    from: createJsonTransform(toCamel)\n};\nfromCamel.column = {\n    to: fromCamel\n};\nconst camel = {\n    ...toCamel\n};\ncamel.column.to = fromCamel;\ntoPascal.column = {\n    from: toPascal\n};\ntoPascal.value = {\n    from: createJsonTransform(toPascal)\n};\nfromPascal.column = {\n    to: fromPascal\n};\nconst pascal = {\n    ...toPascal\n};\npascal.column.to = fromPascal;\ntoKebab.column = {\n    from: toKebab\n};\ntoKebab.value = {\n    from: createJsonTransform(toKebab)\n};\nfromKebab.column = {\n    to: fromKebab\n};\nconst kebab = {\n    ...toKebab\n};\nkebab.column.to = fromKebab;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/types.js\n");

/***/ })

};
;